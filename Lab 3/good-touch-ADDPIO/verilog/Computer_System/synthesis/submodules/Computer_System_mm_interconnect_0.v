// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        Audio_Subsystem_sys_reset_reset_bridge_in_reset_reset,                    //                    Audio_Subsystem_sys_reset_reset_bridge_in_reset.reset
		input  wire        Bus_master_audio_reset_reset_bridge_in_reset_reset,                       //                       Bus_master_audio_reset_reset_bridge_in_reset.reset
		input  wire [15:0] Bus_master_audio_avalon_master_address,                                   //                                     Bus_master_audio_avalon_master.address
		output wire        Bus_master_audio_avalon_master_waitrequest,                               //                                                                   .waitrequest
		input  wire [3:0]  Bus_master_audio_avalon_master_byteenable,                                //                                                                   .byteenable
		input  wire        Bus_master_audio_avalon_master_read,                                      //                                                                   .read
		output wire [31:0] Bus_master_audio_avalon_master_readdata,                                  //                                                                   .readdata
		input  wire        Bus_master_audio_avalon_master_write,                                     //                                                                   .write
		input  wire [31:0] Bus_master_audio_avalon_master_writedata,                                 //                                                                   .writedata
		output wire [1:0]  ampl_pio_s1_address,                                                      //                                                        ampl_pio_s1.address
		input  wire [31:0] ampl_pio_s1_readdata,                                                     //                                                                   .readdata
		output wire [1:0]  Audio_Subsystem_audio_slave_address,                                      //                                        Audio_Subsystem_audio_slave.address
		output wire        Audio_Subsystem_audio_slave_write,                                        //                                                                   .write
		output wire        Audio_Subsystem_audio_slave_read,                                         //                                                                   .read
		input  wire [31:0] Audio_Subsystem_audio_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0] Audio_Subsystem_audio_slave_writedata,                                    //                                                                   .writedata
		output wire        Audio_Subsystem_audio_slave_chipselect,                                   //                                                                   .chipselect
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,                                 //                                   AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                                   //                                                                   .write
		output wire        AV_Config_avalon_av_config_slave_read,                                    //                                                                   .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,                              //                                                                   .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]  col_ampl_pio_s1_address,                                                  //                                                    col_ampl_pio_s1.address
		output wire        col_ampl_pio_s1_write,                                                    //                                                                   .write
		input  wire [31:0] col_ampl_pio_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] col_ampl_pio_s1_writedata,                                                //                                                                   .writedata
		output wire        col_ampl_pio_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  counter_pio_s1_address,                                                   //                                                     counter_pio_s1.address
		input  wire [31:0] counter_pio_s1_readdata,                                                  //                                                                   .readdata
		output wire [1:0]  done_pio_s1_address,                                                      //                                                        done_pio_s1.address
		output wire        done_pio_s1_write,                                                        //                                                                   .write
		input  wire [31:0] done_pio_s1_readdata,                                                     //                                                                   .readdata
		output wire [31:0] done_pio_s1_writedata,                                                    //                                                                   .writedata
		output wire        done_pio_s1_chipselect,                                                   //                                                                   .chipselect
		output wire [1:0]  incr_ampl_pio_s1_address,                                                 //                                                   incr_ampl_pio_s1.address
		output wire        incr_ampl_pio_s1_write,                                                   //                                                                   .write
		input  wire [31:0] incr_ampl_pio_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0] incr_ampl_pio_s1_writedata,                                               //                                                                   .writedata
		output wire        incr_ampl_pio_s1_chipselect,                                              //                                                                   .chipselect
		output wire [1:0]  num_cols_pio_s1_address,                                                  //                                                    num_cols_pio_s1.address
		output wire        num_cols_pio_s1_write,                                                    //                                                                   .write
		input  wire [31:0] num_cols_pio_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] num_cols_pio_s1_writedata,                                                //                                                                   .writedata
		output wire        num_cols_pio_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  num_rows_pio_s1_address,                                                  //                                                    num_rows_pio_s1.address
		output wire        num_rows_pio_s1_write,                                                    //                                                                   .write
		input  wire [31:0] num_rows_pio_s1_readdata,                                                 //                                                                   .readdata
		output wire [31:0] num_rows_pio_s1_writedata,                                                //                                                                   .writedata
		output wire        num_rows_pio_s1_chipselect,                                               //                                                                   .chipselect
		output wire [1:0]  reset_pio_s1_address,                                                     //                                                       reset_pio_s1.address
		output wire        reset_pio_s1_write,                                                       //                                                                   .write
		input  wire [31:0] reset_pio_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0] reset_pio_s1_writedata,                                                   //                                                                   .writedata
		output wire        reset_pio_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]  rho_pio_s1_address,                                                       //                                                         rho_pio_s1.address
		output wire        rho_pio_s1_write,                                                         //                                                                   .write
		input  wire [31:0] rho_pio_s1_readdata,                                                      //                                                                   .readdata
		output wire [31:0] rho_pio_s1_writedata,                                                     //                                                                   .writedata
		output wire        rho_pio_s1_chipselect                                                     //                                                                   .chipselect
	);

	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_waitrequest;   // Bus_master_audio_avalon_master_agent:av_waitrequest -> Bus_master_audio_avalon_master_translator:uav_waitrequest
	wire   [31:0] bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdata;      // Bus_master_audio_avalon_master_agent:av_readdata -> Bus_master_audio_avalon_master_translator:uav_readdata
	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_debugaccess;   // Bus_master_audio_avalon_master_translator:uav_debugaccess -> Bus_master_audio_avalon_master_agent:av_debugaccess
	wire   [20:0] bus_master_audio_avalon_master_translator_avalon_universal_master_0_address;       // Bus_master_audio_avalon_master_translator:uav_address -> Bus_master_audio_avalon_master_agent:av_address
	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_read;          // Bus_master_audio_avalon_master_translator:uav_read -> Bus_master_audio_avalon_master_agent:av_read
	wire    [3:0] bus_master_audio_avalon_master_translator_avalon_universal_master_0_byteenable;    // Bus_master_audio_avalon_master_translator:uav_byteenable -> Bus_master_audio_avalon_master_agent:av_byteenable
	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdatavalid; // Bus_master_audio_avalon_master_agent:av_readdatavalid -> Bus_master_audio_avalon_master_translator:uav_readdatavalid
	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_lock;          // Bus_master_audio_avalon_master_translator:uav_lock -> Bus_master_audio_avalon_master_agent:av_lock
	wire          bus_master_audio_avalon_master_translator_avalon_universal_master_0_write;         // Bus_master_audio_avalon_master_translator:uav_write -> Bus_master_audio_avalon_master_agent:av_write
	wire   [31:0] bus_master_audio_avalon_master_translator_avalon_universal_master_0_writedata;     // Bus_master_audio_avalon_master_translator:uav_writedata -> Bus_master_audio_avalon_master_agent:av_writedata
	wire    [2:0] bus_master_audio_avalon_master_translator_avalon_universal_master_0_burstcount;    // Bus_master_audio_avalon_master_translator:uav_burstcount -> Bus_master_audio_avalon_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                             // rsp_mux_002:src_valid -> Bus_master_audio_avalon_master_agent:rp_valid
	wire  [117:0] rsp_mux_002_src_data;                                                              // rsp_mux_002:src_data -> Bus_master_audio_avalon_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                             // Bus_master_audio_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [10:0] rsp_mux_002_src_channel;                                                           // rsp_mux_002:src_channel -> Bus_master_audio_avalon_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                     // rsp_mux_002:src_startofpacket -> Bus_master_audio_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                       // rsp_mux_002:src_endofpacket -> Bus_master_audio_avalon_master_agent:rp_endofpacket
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_readdata;                                     // Audio_Subsystem_audio_slave_translator:uav_readdata -> Audio_Subsystem_audio_slave_agent:m0_readdata
	wire          audio_subsystem_audio_slave_agent_m0_waitrequest;                                  // Audio_Subsystem_audio_slave_translator:uav_waitrequest -> Audio_Subsystem_audio_slave_agent:m0_waitrequest
	wire          audio_subsystem_audio_slave_agent_m0_debugaccess;                                  // Audio_Subsystem_audio_slave_agent:m0_debugaccess -> Audio_Subsystem_audio_slave_translator:uav_debugaccess
	wire   [20:0] audio_subsystem_audio_slave_agent_m0_address;                                      // Audio_Subsystem_audio_slave_agent:m0_address -> Audio_Subsystem_audio_slave_translator:uav_address
	wire    [3:0] audio_subsystem_audio_slave_agent_m0_byteenable;                                   // Audio_Subsystem_audio_slave_agent:m0_byteenable -> Audio_Subsystem_audio_slave_translator:uav_byteenable
	wire          audio_subsystem_audio_slave_agent_m0_read;                                         // Audio_Subsystem_audio_slave_agent:m0_read -> Audio_Subsystem_audio_slave_translator:uav_read
	wire          audio_subsystem_audio_slave_agent_m0_readdatavalid;                                // Audio_Subsystem_audio_slave_translator:uav_readdatavalid -> Audio_Subsystem_audio_slave_agent:m0_readdatavalid
	wire          audio_subsystem_audio_slave_agent_m0_lock;                                         // Audio_Subsystem_audio_slave_agent:m0_lock -> Audio_Subsystem_audio_slave_translator:uav_lock
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_writedata;                                    // Audio_Subsystem_audio_slave_agent:m0_writedata -> Audio_Subsystem_audio_slave_translator:uav_writedata
	wire          audio_subsystem_audio_slave_agent_m0_write;                                        // Audio_Subsystem_audio_slave_agent:m0_write -> Audio_Subsystem_audio_slave_translator:uav_write
	wire    [2:0] audio_subsystem_audio_slave_agent_m0_burstcount;                                   // Audio_Subsystem_audio_slave_agent:m0_burstcount -> Audio_Subsystem_audio_slave_translator:uav_burstcount
	wire          audio_subsystem_audio_slave_agent_rf_source_valid;                                 // Audio_Subsystem_audio_slave_agent:rf_source_valid -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_valid
	wire  [118:0] audio_subsystem_audio_slave_agent_rf_source_data;                                  // Audio_Subsystem_audio_slave_agent:rf_source_data -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rf_source_ready;                                 // Audio_Subsystem_audio_slave_agent_rsp_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rf_source_ready
	wire          audio_subsystem_audio_slave_agent_rf_source_startofpacket;                         // Audio_Subsystem_audio_slave_agent:rf_source_startofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_subsystem_audio_slave_agent_rf_source_endofpacket;                           // Audio_Subsystem_audio_slave_agent:rf_source_endofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_valid;                              // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_valid -> Audio_Subsystem_audio_slave_agent:rf_sink_valid
	wire  [118:0] audio_subsystem_audio_slave_agent_rsp_fifo_out_data;                               // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_data -> Audio_Subsystem_audio_slave_agent:rf_sink_data
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_ready;                              // Audio_Subsystem_audio_slave_agent:rf_sink_ready -> Audio_Subsystem_audio_slave_agent_rsp_fifo:out_ready
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket;                      // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_startofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket;                        // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_endofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_valid;                            // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_valid -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_src_data;                             // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_data -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_ready;                            // Audio_Subsystem_audio_slave_agent_rdata_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rdata_fifo_src_ready
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                                // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                             // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                             // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [20:0] av_config_avalon_av_config_slave_agent_m0_address;                                 // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                              // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                                    // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                           // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                                    // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                               // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                                   // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                              // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                            // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [118:0] av_config_avalon_av_config_slave_agent_rf_source_data;                             // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                            // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                    // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                      // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                         // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [118:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                          // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                         // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                 // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                   // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                       // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                        // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                       // AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire   [31:0] counter_pio_s1_agent_m0_readdata;                                                  // counter_pio_s1_translator:uav_readdata -> counter_pio_s1_agent:m0_readdata
	wire          counter_pio_s1_agent_m0_waitrequest;                                               // counter_pio_s1_translator:uav_waitrequest -> counter_pio_s1_agent:m0_waitrequest
	wire          counter_pio_s1_agent_m0_debugaccess;                                               // counter_pio_s1_agent:m0_debugaccess -> counter_pio_s1_translator:uav_debugaccess
	wire   [20:0] counter_pio_s1_agent_m0_address;                                                   // counter_pio_s1_agent:m0_address -> counter_pio_s1_translator:uav_address
	wire    [3:0] counter_pio_s1_agent_m0_byteenable;                                                // counter_pio_s1_agent:m0_byteenable -> counter_pio_s1_translator:uav_byteenable
	wire          counter_pio_s1_agent_m0_read;                                                      // counter_pio_s1_agent:m0_read -> counter_pio_s1_translator:uav_read
	wire          counter_pio_s1_agent_m0_readdatavalid;                                             // counter_pio_s1_translator:uav_readdatavalid -> counter_pio_s1_agent:m0_readdatavalid
	wire          counter_pio_s1_agent_m0_lock;                                                      // counter_pio_s1_agent:m0_lock -> counter_pio_s1_translator:uav_lock
	wire   [31:0] counter_pio_s1_agent_m0_writedata;                                                 // counter_pio_s1_agent:m0_writedata -> counter_pio_s1_translator:uav_writedata
	wire          counter_pio_s1_agent_m0_write;                                                     // counter_pio_s1_agent:m0_write -> counter_pio_s1_translator:uav_write
	wire    [2:0] counter_pio_s1_agent_m0_burstcount;                                                // counter_pio_s1_agent:m0_burstcount -> counter_pio_s1_translator:uav_burstcount
	wire          counter_pio_s1_agent_rf_source_valid;                                              // counter_pio_s1_agent:rf_source_valid -> counter_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] counter_pio_s1_agent_rf_source_data;                                               // counter_pio_s1_agent:rf_source_data -> counter_pio_s1_agent_rsp_fifo:in_data
	wire          counter_pio_s1_agent_rf_source_ready;                                              // counter_pio_s1_agent_rsp_fifo:in_ready -> counter_pio_s1_agent:rf_source_ready
	wire          counter_pio_s1_agent_rf_source_startofpacket;                                      // counter_pio_s1_agent:rf_source_startofpacket -> counter_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          counter_pio_s1_agent_rf_source_endofpacket;                                        // counter_pio_s1_agent:rf_source_endofpacket -> counter_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          counter_pio_s1_agent_rsp_fifo_out_valid;                                           // counter_pio_s1_agent_rsp_fifo:out_valid -> counter_pio_s1_agent:rf_sink_valid
	wire  [118:0] counter_pio_s1_agent_rsp_fifo_out_data;                                            // counter_pio_s1_agent_rsp_fifo:out_data -> counter_pio_s1_agent:rf_sink_data
	wire          counter_pio_s1_agent_rsp_fifo_out_ready;                                           // counter_pio_s1_agent:rf_sink_ready -> counter_pio_s1_agent_rsp_fifo:out_ready
	wire          counter_pio_s1_agent_rsp_fifo_out_startofpacket;                                   // counter_pio_s1_agent_rsp_fifo:out_startofpacket -> counter_pio_s1_agent:rf_sink_startofpacket
	wire          counter_pio_s1_agent_rsp_fifo_out_endofpacket;                                     // counter_pio_s1_agent_rsp_fifo:out_endofpacket -> counter_pio_s1_agent:rf_sink_endofpacket
	wire          counter_pio_s1_agent_rdata_fifo_src_valid;                                         // counter_pio_s1_agent:rdata_fifo_src_valid -> counter_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] counter_pio_s1_agent_rdata_fifo_src_data;                                          // counter_pio_s1_agent:rdata_fifo_src_data -> counter_pio_s1_agent_rdata_fifo:in_data
	wire          counter_pio_s1_agent_rdata_fifo_src_ready;                                         // counter_pio_s1_agent_rdata_fifo:in_ready -> counter_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] num_rows_pio_s1_agent_m0_readdata;                                                 // num_rows_pio_s1_translator:uav_readdata -> num_rows_pio_s1_agent:m0_readdata
	wire          num_rows_pio_s1_agent_m0_waitrequest;                                              // num_rows_pio_s1_translator:uav_waitrequest -> num_rows_pio_s1_agent:m0_waitrequest
	wire          num_rows_pio_s1_agent_m0_debugaccess;                                              // num_rows_pio_s1_agent:m0_debugaccess -> num_rows_pio_s1_translator:uav_debugaccess
	wire   [20:0] num_rows_pio_s1_agent_m0_address;                                                  // num_rows_pio_s1_agent:m0_address -> num_rows_pio_s1_translator:uav_address
	wire    [3:0] num_rows_pio_s1_agent_m0_byteenable;                                               // num_rows_pio_s1_agent:m0_byteenable -> num_rows_pio_s1_translator:uav_byteenable
	wire          num_rows_pio_s1_agent_m0_read;                                                     // num_rows_pio_s1_agent:m0_read -> num_rows_pio_s1_translator:uav_read
	wire          num_rows_pio_s1_agent_m0_readdatavalid;                                            // num_rows_pio_s1_translator:uav_readdatavalid -> num_rows_pio_s1_agent:m0_readdatavalid
	wire          num_rows_pio_s1_agent_m0_lock;                                                     // num_rows_pio_s1_agent:m0_lock -> num_rows_pio_s1_translator:uav_lock
	wire   [31:0] num_rows_pio_s1_agent_m0_writedata;                                                // num_rows_pio_s1_agent:m0_writedata -> num_rows_pio_s1_translator:uav_writedata
	wire          num_rows_pio_s1_agent_m0_write;                                                    // num_rows_pio_s1_agent:m0_write -> num_rows_pio_s1_translator:uav_write
	wire    [2:0] num_rows_pio_s1_agent_m0_burstcount;                                               // num_rows_pio_s1_agent:m0_burstcount -> num_rows_pio_s1_translator:uav_burstcount
	wire          num_rows_pio_s1_agent_rf_source_valid;                                             // num_rows_pio_s1_agent:rf_source_valid -> num_rows_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] num_rows_pio_s1_agent_rf_source_data;                                              // num_rows_pio_s1_agent:rf_source_data -> num_rows_pio_s1_agent_rsp_fifo:in_data
	wire          num_rows_pio_s1_agent_rf_source_ready;                                             // num_rows_pio_s1_agent_rsp_fifo:in_ready -> num_rows_pio_s1_agent:rf_source_ready
	wire          num_rows_pio_s1_agent_rf_source_startofpacket;                                     // num_rows_pio_s1_agent:rf_source_startofpacket -> num_rows_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          num_rows_pio_s1_agent_rf_source_endofpacket;                                       // num_rows_pio_s1_agent:rf_source_endofpacket -> num_rows_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          num_rows_pio_s1_agent_rsp_fifo_out_valid;                                          // num_rows_pio_s1_agent_rsp_fifo:out_valid -> num_rows_pio_s1_agent:rf_sink_valid
	wire  [118:0] num_rows_pio_s1_agent_rsp_fifo_out_data;                                           // num_rows_pio_s1_agent_rsp_fifo:out_data -> num_rows_pio_s1_agent:rf_sink_data
	wire          num_rows_pio_s1_agent_rsp_fifo_out_ready;                                          // num_rows_pio_s1_agent:rf_sink_ready -> num_rows_pio_s1_agent_rsp_fifo:out_ready
	wire          num_rows_pio_s1_agent_rsp_fifo_out_startofpacket;                                  // num_rows_pio_s1_agent_rsp_fifo:out_startofpacket -> num_rows_pio_s1_agent:rf_sink_startofpacket
	wire          num_rows_pio_s1_agent_rsp_fifo_out_endofpacket;                                    // num_rows_pio_s1_agent_rsp_fifo:out_endofpacket -> num_rows_pio_s1_agent:rf_sink_endofpacket
	wire          num_rows_pio_s1_agent_rdata_fifo_src_valid;                                        // num_rows_pio_s1_agent:rdata_fifo_src_valid -> num_rows_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] num_rows_pio_s1_agent_rdata_fifo_src_data;                                         // num_rows_pio_s1_agent:rdata_fifo_src_data -> num_rows_pio_s1_agent_rdata_fifo:in_data
	wire          num_rows_pio_s1_agent_rdata_fifo_src_ready;                                        // num_rows_pio_s1_agent_rdata_fifo:in_ready -> num_rows_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] reset_pio_s1_agent_m0_readdata;                                                    // reset_pio_s1_translator:uav_readdata -> reset_pio_s1_agent:m0_readdata
	wire          reset_pio_s1_agent_m0_waitrequest;                                                 // reset_pio_s1_translator:uav_waitrequest -> reset_pio_s1_agent:m0_waitrequest
	wire          reset_pio_s1_agent_m0_debugaccess;                                                 // reset_pio_s1_agent:m0_debugaccess -> reset_pio_s1_translator:uav_debugaccess
	wire   [20:0] reset_pio_s1_agent_m0_address;                                                     // reset_pio_s1_agent:m0_address -> reset_pio_s1_translator:uav_address
	wire    [3:0] reset_pio_s1_agent_m0_byteenable;                                                  // reset_pio_s1_agent:m0_byteenable -> reset_pio_s1_translator:uav_byteenable
	wire          reset_pio_s1_agent_m0_read;                                                        // reset_pio_s1_agent:m0_read -> reset_pio_s1_translator:uav_read
	wire          reset_pio_s1_agent_m0_readdatavalid;                                               // reset_pio_s1_translator:uav_readdatavalid -> reset_pio_s1_agent:m0_readdatavalid
	wire          reset_pio_s1_agent_m0_lock;                                                        // reset_pio_s1_agent:m0_lock -> reset_pio_s1_translator:uav_lock
	wire   [31:0] reset_pio_s1_agent_m0_writedata;                                                   // reset_pio_s1_agent:m0_writedata -> reset_pio_s1_translator:uav_writedata
	wire          reset_pio_s1_agent_m0_write;                                                       // reset_pio_s1_agent:m0_write -> reset_pio_s1_translator:uav_write
	wire    [2:0] reset_pio_s1_agent_m0_burstcount;                                                  // reset_pio_s1_agent:m0_burstcount -> reset_pio_s1_translator:uav_burstcount
	wire          reset_pio_s1_agent_rf_source_valid;                                                // reset_pio_s1_agent:rf_source_valid -> reset_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] reset_pio_s1_agent_rf_source_data;                                                 // reset_pio_s1_agent:rf_source_data -> reset_pio_s1_agent_rsp_fifo:in_data
	wire          reset_pio_s1_agent_rf_source_ready;                                                // reset_pio_s1_agent_rsp_fifo:in_ready -> reset_pio_s1_agent:rf_source_ready
	wire          reset_pio_s1_agent_rf_source_startofpacket;                                        // reset_pio_s1_agent:rf_source_startofpacket -> reset_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          reset_pio_s1_agent_rf_source_endofpacket;                                          // reset_pio_s1_agent:rf_source_endofpacket -> reset_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          reset_pio_s1_agent_rsp_fifo_out_valid;                                             // reset_pio_s1_agent_rsp_fifo:out_valid -> reset_pio_s1_agent:rf_sink_valid
	wire  [118:0] reset_pio_s1_agent_rsp_fifo_out_data;                                              // reset_pio_s1_agent_rsp_fifo:out_data -> reset_pio_s1_agent:rf_sink_data
	wire          reset_pio_s1_agent_rsp_fifo_out_ready;                                             // reset_pio_s1_agent:rf_sink_ready -> reset_pio_s1_agent_rsp_fifo:out_ready
	wire          reset_pio_s1_agent_rsp_fifo_out_startofpacket;                                     // reset_pio_s1_agent_rsp_fifo:out_startofpacket -> reset_pio_s1_agent:rf_sink_startofpacket
	wire          reset_pio_s1_agent_rsp_fifo_out_endofpacket;                                       // reset_pio_s1_agent_rsp_fifo:out_endofpacket -> reset_pio_s1_agent:rf_sink_endofpacket
	wire          reset_pio_s1_agent_rdata_fifo_src_valid;                                           // reset_pio_s1_agent:rdata_fifo_src_valid -> reset_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] reset_pio_s1_agent_rdata_fifo_src_data;                                            // reset_pio_s1_agent:rdata_fifo_src_data -> reset_pio_s1_agent_rdata_fifo:in_data
	wire          reset_pio_s1_agent_rdata_fifo_src_ready;                                           // reset_pio_s1_agent_rdata_fifo:in_ready -> reset_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] ampl_pio_s1_agent_m0_readdata;                                                     // ampl_pio_s1_translator:uav_readdata -> ampl_pio_s1_agent:m0_readdata
	wire          ampl_pio_s1_agent_m0_waitrequest;                                                  // ampl_pio_s1_translator:uav_waitrequest -> ampl_pio_s1_agent:m0_waitrequest
	wire          ampl_pio_s1_agent_m0_debugaccess;                                                  // ampl_pio_s1_agent:m0_debugaccess -> ampl_pio_s1_translator:uav_debugaccess
	wire   [20:0] ampl_pio_s1_agent_m0_address;                                                      // ampl_pio_s1_agent:m0_address -> ampl_pio_s1_translator:uav_address
	wire    [3:0] ampl_pio_s1_agent_m0_byteenable;                                                   // ampl_pio_s1_agent:m0_byteenable -> ampl_pio_s1_translator:uav_byteenable
	wire          ampl_pio_s1_agent_m0_read;                                                         // ampl_pio_s1_agent:m0_read -> ampl_pio_s1_translator:uav_read
	wire          ampl_pio_s1_agent_m0_readdatavalid;                                                // ampl_pio_s1_translator:uav_readdatavalid -> ampl_pio_s1_agent:m0_readdatavalid
	wire          ampl_pio_s1_agent_m0_lock;                                                         // ampl_pio_s1_agent:m0_lock -> ampl_pio_s1_translator:uav_lock
	wire   [31:0] ampl_pio_s1_agent_m0_writedata;                                                    // ampl_pio_s1_agent:m0_writedata -> ampl_pio_s1_translator:uav_writedata
	wire          ampl_pio_s1_agent_m0_write;                                                        // ampl_pio_s1_agent:m0_write -> ampl_pio_s1_translator:uav_write
	wire    [2:0] ampl_pio_s1_agent_m0_burstcount;                                                   // ampl_pio_s1_agent:m0_burstcount -> ampl_pio_s1_translator:uav_burstcount
	wire          ampl_pio_s1_agent_rf_source_valid;                                                 // ampl_pio_s1_agent:rf_source_valid -> ampl_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] ampl_pio_s1_agent_rf_source_data;                                                  // ampl_pio_s1_agent:rf_source_data -> ampl_pio_s1_agent_rsp_fifo:in_data
	wire          ampl_pio_s1_agent_rf_source_ready;                                                 // ampl_pio_s1_agent_rsp_fifo:in_ready -> ampl_pio_s1_agent:rf_source_ready
	wire          ampl_pio_s1_agent_rf_source_startofpacket;                                         // ampl_pio_s1_agent:rf_source_startofpacket -> ampl_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          ampl_pio_s1_agent_rf_source_endofpacket;                                           // ampl_pio_s1_agent:rf_source_endofpacket -> ampl_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          ampl_pio_s1_agent_rsp_fifo_out_valid;                                              // ampl_pio_s1_agent_rsp_fifo:out_valid -> ampl_pio_s1_agent:rf_sink_valid
	wire  [118:0] ampl_pio_s1_agent_rsp_fifo_out_data;                                               // ampl_pio_s1_agent_rsp_fifo:out_data -> ampl_pio_s1_agent:rf_sink_data
	wire          ampl_pio_s1_agent_rsp_fifo_out_ready;                                              // ampl_pio_s1_agent:rf_sink_ready -> ampl_pio_s1_agent_rsp_fifo:out_ready
	wire          ampl_pio_s1_agent_rsp_fifo_out_startofpacket;                                      // ampl_pio_s1_agent_rsp_fifo:out_startofpacket -> ampl_pio_s1_agent:rf_sink_startofpacket
	wire          ampl_pio_s1_agent_rsp_fifo_out_endofpacket;                                        // ampl_pio_s1_agent_rsp_fifo:out_endofpacket -> ampl_pio_s1_agent:rf_sink_endofpacket
	wire          ampl_pio_s1_agent_rdata_fifo_src_valid;                                            // ampl_pio_s1_agent:rdata_fifo_src_valid -> ampl_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ampl_pio_s1_agent_rdata_fifo_src_data;                                             // ampl_pio_s1_agent:rdata_fifo_src_data -> ampl_pio_s1_agent_rdata_fifo:in_data
	wire          ampl_pio_s1_agent_rdata_fifo_src_ready;                                            // ampl_pio_s1_agent_rdata_fifo:in_ready -> ampl_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] incr_ampl_pio_s1_agent_m0_readdata;                                                // incr_ampl_pio_s1_translator:uav_readdata -> incr_ampl_pio_s1_agent:m0_readdata
	wire          incr_ampl_pio_s1_agent_m0_waitrequest;                                             // incr_ampl_pio_s1_translator:uav_waitrequest -> incr_ampl_pio_s1_agent:m0_waitrequest
	wire          incr_ampl_pio_s1_agent_m0_debugaccess;                                             // incr_ampl_pio_s1_agent:m0_debugaccess -> incr_ampl_pio_s1_translator:uav_debugaccess
	wire   [20:0] incr_ampl_pio_s1_agent_m0_address;                                                 // incr_ampl_pio_s1_agent:m0_address -> incr_ampl_pio_s1_translator:uav_address
	wire    [3:0] incr_ampl_pio_s1_agent_m0_byteenable;                                              // incr_ampl_pio_s1_agent:m0_byteenable -> incr_ampl_pio_s1_translator:uav_byteenable
	wire          incr_ampl_pio_s1_agent_m0_read;                                                    // incr_ampl_pio_s1_agent:m0_read -> incr_ampl_pio_s1_translator:uav_read
	wire          incr_ampl_pio_s1_agent_m0_readdatavalid;                                           // incr_ampl_pio_s1_translator:uav_readdatavalid -> incr_ampl_pio_s1_agent:m0_readdatavalid
	wire          incr_ampl_pio_s1_agent_m0_lock;                                                    // incr_ampl_pio_s1_agent:m0_lock -> incr_ampl_pio_s1_translator:uav_lock
	wire   [31:0] incr_ampl_pio_s1_agent_m0_writedata;                                               // incr_ampl_pio_s1_agent:m0_writedata -> incr_ampl_pio_s1_translator:uav_writedata
	wire          incr_ampl_pio_s1_agent_m0_write;                                                   // incr_ampl_pio_s1_agent:m0_write -> incr_ampl_pio_s1_translator:uav_write
	wire    [2:0] incr_ampl_pio_s1_agent_m0_burstcount;                                              // incr_ampl_pio_s1_agent:m0_burstcount -> incr_ampl_pio_s1_translator:uav_burstcount
	wire          incr_ampl_pio_s1_agent_rf_source_valid;                                            // incr_ampl_pio_s1_agent:rf_source_valid -> incr_ampl_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] incr_ampl_pio_s1_agent_rf_source_data;                                             // incr_ampl_pio_s1_agent:rf_source_data -> incr_ampl_pio_s1_agent_rsp_fifo:in_data
	wire          incr_ampl_pio_s1_agent_rf_source_ready;                                            // incr_ampl_pio_s1_agent_rsp_fifo:in_ready -> incr_ampl_pio_s1_agent:rf_source_ready
	wire          incr_ampl_pio_s1_agent_rf_source_startofpacket;                                    // incr_ampl_pio_s1_agent:rf_source_startofpacket -> incr_ampl_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          incr_ampl_pio_s1_agent_rf_source_endofpacket;                                      // incr_ampl_pio_s1_agent:rf_source_endofpacket -> incr_ampl_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          incr_ampl_pio_s1_agent_rsp_fifo_out_valid;                                         // incr_ampl_pio_s1_agent_rsp_fifo:out_valid -> incr_ampl_pio_s1_agent:rf_sink_valid
	wire  [118:0] incr_ampl_pio_s1_agent_rsp_fifo_out_data;                                          // incr_ampl_pio_s1_agent_rsp_fifo:out_data -> incr_ampl_pio_s1_agent:rf_sink_data
	wire          incr_ampl_pio_s1_agent_rsp_fifo_out_ready;                                         // incr_ampl_pio_s1_agent:rf_sink_ready -> incr_ampl_pio_s1_agent_rsp_fifo:out_ready
	wire          incr_ampl_pio_s1_agent_rsp_fifo_out_startofpacket;                                 // incr_ampl_pio_s1_agent_rsp_fifo:out_startofpacket -> incr_ampl_pio_s1_agent:rf_sink_startofpacket
	wire          incr_ampl_pio_s1_agent_rsp_fifo_out_endofpacket;                                   // incr_ampl_pio_s1_agent_rsp_fifo:out_endofpacket -> incr_ampl_pio_s1_agent:rf_sink_endofpacket
	wire          incr_ampl_pio_s1_agent_rdata_fifo_src_valid;                                       // incr_ampl_pio_s1_agent:rdata_fifo_src_valid -> incr_ampl_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] incr_ampl_pio_s1_agent_rdata_fifo_src_data;                                        // incr_ampl_pio_s1_agent:rdata_fifo_src_data -> incr_ampl_pio_s1_agent_rdata_fifo:in_data
	wire          incr_ampl_pio_s1_agent_rdata_fifo_src_ready;                                       // incr_ampl_pio_s1_agent_rdata_fifo:in_ready -> incr_ampl_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] rho_pio_s1_agent_m0_readdata;                                                      // rho_pio_s1_translator:uav_readdata -> rho_pio_s1_agent:m0_readdata
	wire          rho_pio_s1_agent_m0_waitrequest;                                                   // rho_pio_s1_translator:uav_waitrequest -> rho_pio_s1_agent:m0_waitrequest
	wire          rho_pio_s1_agent_m0_debugaccess;                                                   // rho_pio_s1_agent:m0_debugaccess -> rho_pio_s1_translator:uav_debugaccess
	wire   [20:0] rho_pio_s1_agent_m0_address;                                                       // rho_pio_s1_agent:m0_address -> rho_pio_s1_translator:uav_address
	wire    [3:0] rho_pio_s1_agent_m0_byteenable;                                                    // rho_pio_s1_agent:m0_byteenable -> rho_pio_s1_translator:uav_byteenable
	wire          rho_pio_s1_agent_m0_read;                                                          // rho_pio_s1_agent:m0_read -> rho_pio_s1_translator:uav_read
	wire          rho_pio_s1_agent_m0_readdatavalid;                                                 // rho_pio_s1_translator:uav_readdatavalid -> rho_pio_s1_agent:m0_readdatavalid
	wire          rho_pio_s1_agent_m0_lock;                                                          // rho_pio_s1_agent:m0_lock -> rho_pio_s1_translator:uav_lock
	wire   [31:0] rho_pio_s1_agent_m0_writedata;                                                     // rho_pio_s1_agent:m0_writedata -> rho_pio_s1_translator:uav_writedata
	wire          rho_pio_s1_agent_m0_write;                                                         // rho_pio_s1_agent:m0_write -> rho_pio_s1_translator:uav_write
	wire    [2:0] rho_pio_s1_agent_m0_burstcount;                                                    // rho_pio_s1_agent:m0_burstcount -> rho_pio_s1_translator:uav_burstcount
	wire          rho_pio_s1_agent_rf_source_valid;                                                  // rho_pio_s1_agent:rf_source_valid -> rho_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] rho_pio_s1_agent_rf_source_data;                                                   // rho_pio_s1_agent:rf_source_data -> rho_pio_s1_agent_rsp_fifo:in_data
	wire          rho_pio_s1_agent_rf_source_ready;                                                  // rho_pio_s1_agent_rsp_fifo:in_ready -> rho_pio_s1_agent:rf_source_ready
	wire          rho_pio_s1_agent_rf_source_startofpacket;                                          // rho_pio_s1_agent:rf_source_startofpacket -> rho_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          rho_pio_s1_agent_rf_source_endofpacket;                                            // rho_pio_s1_agent:rf_source_endofpacket -> rho_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          rho_pio_s1_agent_rsp_fifo_out_valid;                                               // rho_pio_s1_agent_rsp_fifo:out_valid -> rho_pio_s1_agent:rf_sink_valid
	wire  [118:0] rho_pio_s1_agent_rsp_fifo_out_data;                                                // rho_pio_s1_agent_rsp_fifo:out_data -> rho_pio_s1_agent:rf_sink_data
	wire          rho_pio_s1_agent_rsp_fifo_out_ready;                                               // rho_pio_s1_agent:rf_sink_ready -> rho_pio_s1_agent_rsp_fifo:out_ready
	wire          rho_pio_s1_agent_rsp_fifo_out_startofpacket;                                       // rho_pio_s1_agent_rsp_fifo:out_startofpacket -> rho_pio_s1_agent:rf_sink_startofpacket
	wire          rho_pio_s1_agent_rsp_fifo_out_endofpacket;                                         // rho_pio_s1_agent_rsp_fifo:out_endofpacket -> rho_pio_s1_agent:rf_sink_endofpacket
	wire          rho_pio_s1_agent_rdata_fifo_src_valid;                                             // rho_pio_s1_agent:rdata_fifo_src_valid -> rho_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] rho_pio_s1_agent_rdata_fifo_src_data;                                              // rho_pio_s1_agent:rdata_fifo_src_data -> rho_pio_s1_agent_rdata_fifo:in_data
	wire          rho_pio_s1_agent_rdata_fifo_src_ready;                                             // rho_pio_s1_agent_rdata_fifo:in_ready -> rho_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] num_cols_pio_s1_agent_m0_readdata;                                                 // num_cols_pio_s1_translator:uav_readdata -> num_cols_pio_s1_agent:m0_readdata
	wire          num_cols_pio_s1_agent_m0_waitrequest;                                              // num_cols_pio_s1_translator:uav_waitrequest -> num_cols_pio_s1_agent:m0_waitrequest
	wire          num_cols_pio_s1_agent_m0_debugaccess;                                              // num_cols_pio_s1_agent:m0_debugaccess -> num_cols_pio_s1_translator:uav_debugaccess
	wire   [20:0] num_cols_pio_s1_agent_m0_address;                                                  // num_cols_pio_s1_agent:m0_address -> num_cols_pio_s1_translator:uav_address
	wire    [3:0] num_cols_pio_s1_agent_m0_byteenable;                                               // num_cols_pio_s1_agent:m0_byteenable -> num_cols_pio_s1_translator:uav_byteenable
	wire          num_cols_pio_s1_agent_m0_read;                                                     // num_cols_pio_s1_agent:m0_read -> num_cols_pio_s1_translator:uav_read
	wire          num_cols_pio_s1_agent_m0_readdatavalid;                                            // num_cols_pio_s1_translator:uav_readdatavalid -> num_cols_pio_s1_agent:m0_readdatavalid
	wire          num_cols_pio_s1_agent_m0_lock;                                                     // num_cols_pio_s1_agent:m0_lock -> num_cols_pio_s1_translator:uav_lock
	wire   [31:0] num_cols_pio_s1_agent_m0_writedata;                                                // num_cols_pio_s1_agent:m0_writedata -> num_cols_pio_s1_translator:uav_writedata
	wire          num_cols_pio_s1_agent_m0_write;                                                    // num_cols_pio_s1_agent:m0_write -> num_cols_pio_s1_translator:uav_write
	wire    [2:0] num_cols_pio_s1_agent_m0_burstcount;                                               // num_cols_pio_s1_agent:m0_burstcount -> num_cols_pio_s1_translator:uav_burstcount
	wire          num_cols_pio_s1_agent_rf_source_valid;                                             // num_cols_pio_s1_agent:rf_source_valid -> num_cols_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] num_cols_pio_s1_agent_rf_source_data;                                              // num_cols_pio_s1_agent:rf_source_data -> num_cols_pio_s1_agent_rsp_fifo:in_data
	wire          num_cols_pio_s1_agent_rf_source_ready;                                             // num_cols_pio_s1_agent_rsp_fifo:in_ready -> num_cols_pio_s1_agent:rf_source_ready
	wire          num_cols_pio_s1_agent_rf_source_startofpacket;                                     // num_cols_pio_s1_agent:rf_source_startofpacket -> num_cols_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          num_cols_pio_s1_agent_rf_source_endofpacket;                                       // num_cols_pio_s1_agent:rf_source_endofpacket -> num_cols_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          num_cols_pio_s1_agent_rsp_fifo_out_valid;                                          // num_cols_pio_s1_agent_rsp_fifo:out_valid -> num_cols_pio_s1_agent:rf_sink_valid
	wire  [118:0] num_cols_pio_s1_agent_rsp_fifo_out_data;                                           // num_cols_pio_s1_agent_rsp_fifo:out_data -> num_cols_pio_s1_agent:rf_sink_data
	wire          num_cols_pio_s1_agent_rsp_fifo_out_ready;                                          // num_cols_pio_s1_agent:rf_sink_ready -> num_cols_pio_s1_agent_rsp_fifo:out_ready
	wire          num_cols_pio_s1_agent_rsp_fifo_out_startofpacket;                                  // num_cols_pio_s1_agent_rsp_fifo:out_startofpacket -> num_cols_pio_s1_agent:rf_sink_startofpacket
	wire          num_cols_pio_s1_agent_rsp_fifo_out_endofpacket;                                    // num_cols_pio_s1_agent_rsp_fifo:out_endofpacket -> num_cols_pio_s1_agent:rf_sink_endofpacket
	wire          num_cols_pio_s1_agent_rdata_fifo_src_valid;                                        // num_cols_pio_s1_agent:rdata_fifo_src_valid -> num_cols_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] num_cols_pio_s1_agent_rdata_fifo_src_data;                                         // num_cols_pio_s1_agent:rdata_fifo_src_data -> num_cols_pio_s1_agent_rdata_fifo:in_data
	wire          num_cols_pio_s1_agent_rdata_fifo_src_ready;                                        // num_cols_pio_s1_agent_rdata_fifo:in_ready -> num_cols_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] col_ampl_pio_s1_agent_m0_readdata;                                                 // col_ampl_pio_s1_translator:uav_readdata -> col_ampl_pio_s1_agent:m0_readdata
	wire          col_ampl_pio_s1_agent_m0_waitrequest;                                              // col_ampl_pio_s1_translator:uav_waitrequest -> col_ampl_pio_s1_agent:m0_waitrequest
	wire          col_ampl_pio_s1_agent_m0_debugaccess;                                              // col_ampl_pio_s1_agent:m0_debugaccess -> col_ampl_pio_s1_translator:uav_debugaccess
	wire   [20:0] col_ampl_pio_s1_agent_m0_address;                                                  // col_ampl_pio_s1_agent:m0_address -> col_ampl_pio_s1_translator:uav_address
	wire    [3:0] col_ampl_pio_s1_agent_m0_byteenable;                                               // col_ampl_pio_s1_agent:m0_byteenable -> col_ampl_pio_s1_translator:uav_byteenable
	wire          col_ampl_pio_s1_agent_m0_read;                                                     // col_ampl_pio_s1_agent:m0_read -> col_ampl_pio_s1_translator:uav_read
	wire          col_ampl_pio_s1_agent_m0_readdatavalid;                                            // col_ampl_pio_s1_translator:uav_readdatavalid -> col_ampl_pio_s1_agent:m0_readdatavalid
	wire          col_ampl_pio_s1_agent_m0_lock;                                                     // col_ampl_pio_s1_agent:m0_lock -> col_ampl_pio_s1_translator:uav_lock
	wire   [31:0] col_ampl_pio_s1_agent_m0_writedata;                                                // col_ampl_pio_s1_agent:m0_writedata -> col_ampl_pio_s1_translator:uav_writedata
	wire          col_ampl_pio_s1_agent_m0_write;                                                    // col_ampl_pio_s1_agent:m0_write -> col_ampl_pio_s1_translator:uav_write
	wire    [2:0] col_ampl_pio_s1_agent_m0_burstcount;                                               // col_ampl_pio_s1_agent:m0_burstcount -> col_ampl_pio_s1_translator:uav_burstcount
	wire          col_ampl_pio_s1_agent_rf_source_valid;                                             // col_ampl_pio_s1_agent:rf_source_valid -> col_ampl_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] col_ampl_pio_s1_agent_rf_source_data;                                              // col_ampl_pio_s1_agent:rf_source_data -> col_ampl_pio_s1_agent_rsp_fifo:in_data
	wire          col_ampl_pio_s1_agent_rf_source_ready;                                             // col_ampl_pio_s1_agent_rsp_fifo:in_ready -> col_ampl_pio_s1_agent:rf_source_ready
	wire          col_ampl_pio_s1_agent_rf_source_startofpacket;                                     // col_ampl_pio_s1_agent:rf_source_startofpacket -> col_ampl_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          col_ampl_pio_s1_agent_rf_source_endofpacket;                                       // col_ampl_pio_s1_agent:rf_source_endofpacket -> col_ampl_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          col_ampl_pio_s1_agent_rsp_fifo_out_valid;                                          // col_ampl_pio_s1_agent_rsp_fifo:out_valid -> col_ampl_pio_s1_agent:rf_sink_valid
	wire  [118:0] col_ampl_pio_s1_agent_rsp_fifo_out_data;                                           // col_ampl_pio_s1_agent_rsp_fifo:out_data -> col_ampl_pio_s1_agent:rf_sink_data
	wire          col_ampl_pio_s1_agent_rsp_fifo_out_ready;                                          // col_ampl_pio_s1_agent:rf_sink_ready -> col_ampl_pio_s1_agent_rsp_fifo:out_ready
	wire          col_ampl_pio_s1_agent_rsp_fifo_out_startofpacket;                                  // col_ampl_pio_s1_agent_rsp_fifo:out_startofpacket -> col_ampl_pio_s1_agent:rf_sink_startofpacket
	wire          col_ampl_pio_s1_agent_rsp_fifo_out_endofpacket;                                    // col_ampl_pio_s1_agent_rsp_fifo:out_endofpacket -> col_ampl_pio_s1_agent:rf_sink_endofpacket
	wire          col_ampl_pio_s1_agent_rdata_fifo_src_valid;                                        // col_ampl_pio_s1_agent:rdata_fifo_src_valid -> col_ampl_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] col_ampl_pio_s1_agent_rdata_fifo_src_data;                                         // col_ampl_pio_s1_agent:rdata_fifo_src_data -> col_ampl_pio_s1_agent_rdata_fifo:in_data
	wire          col_ampl_pio_s1_agent_rdata_fifo_src_ready;                                        // col_ampl_pio_s1_agent_rdata_fifo:in_ready -> col_ampl_pio_s1_agent:rdata_fifo_src_ready
	wire   [31:0] done_pio_s1_agent_m0_readdata;                                                     // done_pio_s1_translator:uav_readdata -> done_pio_s1_agent:m0_readdata
	wire          done_pio_s1_agent_m0_waitrequest;                                                  // done_pio_s1_translator:uav_waitrequest -> done_pio_s1_agent:m0_waitrequest
	wire          done_pio_s1_agent_m0_debugaccess;                                                  // done_pio_s1_agent:m0_debugaccess -> done_pio_s1_translator:uav_debugaccess
	wire   [20:0] done_pio_s1_agent_m0_address;                                                      // done_pio_s1_agent:m0_address -> done_pio_s1_translator:uav_address
	wire    [3:0] done_pio_s1_agent_m0_byteenable;                                                   // done_pio_s1_agent:m0_byteenable -> done_pio_s1_translator:uav_byteenable
	wire          done_pio_s1_agent_m0_read;                                                         // done_pio_s1_agent:m0_read -> done_pio_s1_translator:uav_read
	wire          done_pio_s1_agent_m0_readdatavalid;                                                // done_pio_s1_translator:uav_readdatavalid -> done_pio_s1_agent:m0_readdatavalid
	wire          done_pio_s1_agent_m0_lock;                                                         // done_pio_s1_agent:m0_lock -> done_pio_s1_translator:uav_lock
	wire   [31:0] done_pio_s1_agent_m0_writedata;                                                    // done_pio_s1_agent:m0_writedata -> done_pio_s1_translator:uav_writedata
	wire          done_pio_s1_agent_m0_write;                                                        // done_pio_s1_agent:m0_write -> done_pio_s1_translator:uav_write
	wire    [2:0] done_pio_s1_agent_m0_burstcount;                                                   // done_pio_s1_agent:m0_burstcount -> done_pio_s1_translator:uav_burstcount
	wire          done_pio_s1_agent_rf_source_valid;                                                 // done_pio_s1_agent:rf_source_valid -> done_pio_s1_agent_rsp_fifo:in_valid
	wire  [118:0] done_pio_s1_agent_rf_source_data;                                                  // done_pio_s1_agent:rf_source_data -> done_pio_s1_agent_rsp_fifo:in_data
	wire          done_pio_s1_agent_rf_source_ready;                                                 // done_pio_s1_agent_rsp_fifo:in_ready -> done_pio_s1_agent:rf_source_ready
	wire          done_pio_s1_agent_rf_source_startofpacket;                                         // done_pio_s1_agent:rf_source_startofpacket -> done_pio_s1_agent_rsp_fifo:in_startofpacket
	wire          done_pio_s1_agent_rf_source_endofpacket;                                           // done_pio_s1_agent:rf_source_endofpacket -> done_pio_s1_agent_rsp_fifo:in_endofpacket
	wire          done_pio_s1_agent_rsp_fifo_out_valid;                                              // done_pio_s1_agent_rsp_fifo:out_valid -> done_pio_s1_agent:rf_sink_valid
	wire  [118:0] done_pio_s1_agent_rsp_fifo_out_data;                                               // done_pio_s1_agent_rsp_fifo:out_data -> done_pio_s1_agent:rf_sink_data
	wire          done_pio_s1_agent_rsp_fifo_out_ready;                                              // done_pio_s1_agent:rf_sink_ready -> done_pio_s1_agent_rsp_fifo:out_ready
	wire          done_pio_s1_agent_rsp_fifo_out_startofpacket;                                      // done_pio_s1_agent_rsp_fifo:out_startofpacket -> done_pio_s1_agent:rf_sink_startofpacket
	wire          done_pio_s1_agent_rsp_fifo_out_endofpacket;                                        // done_pio_s1_agent_rsp_fifo:out_endofpacket -> done_pio_s1_agent:rf_sink_endofpacket
	wire          done_pio_s1_agent_rdata_fifo_src_valid;                                            // done_pio_s1_agent:rdata_fifo_src_valid -> done_pio_s1_agent_rdata_fifo:in_valid
	wire   [33:0] done_pio_s1_agent_rdata_fifo_src_data;                                             // done_pio_s1_agent:rdata_fifo_src_data -> done_pio_s1_agent_rdata_fifo:in_data
	wire          done_pio_s1_agent_rdata_fifo_src_ready;                                            // done_pio_s1_agent_rdata_fifo:in_ready -> done_pio_s1_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                 // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                  // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                 // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                         // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                           // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                  // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                   // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                  // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                          // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                            // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          bus_master_audio_avalon_master_agent_cp_valid;                                     // Bus_master_audio_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire  [117:0] bus_master_audio_avalon_master_agent_cp_data;                                      // Bus_master_audio_avalon_master_agent:cp_data -> router_002:sink_data
	wire          bus_master_audio_avalon_master_agent_cp_ready;                                     // router_002:sink_ready -> Bus_master_audio_avalon_master_agent:cp_ready
	wire          bus_master_audio_avalon_master_agent_cp_startofpacket;                             // Bus_master_audio_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          bus_master_audio_avalon_master_agent_cp_endofpacket;                               // Bus_master_audio_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                              // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [117:0] router_002_src_data;                                                               // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                              // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                            // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                      // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                        // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rp_valid;                                        // Audio_Subsystem_audio_slave_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] audio_subsystem_audio_slave_agent_rp_data;                                         // Audio_Subsystem_audio_slave_agent:rp_data -> router_003:sink_data
	wire          audio_subsystem_audio_slave_agent_rp_ready;                                        // router_003:sink_ready -> Audio_Subsystem_audio_slave_agent:rp_ready
	wire          audio_subsystem_audio_slave_agent_rp_startofpacket;                                // Audio_Subsystem_audio_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rp_endofpacket;                                  // Audio_Subsystem_audio_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                              // router_003:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_003_src_data;                                                               // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                              // rsp_demux:sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                            // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                      // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                        // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                                   // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] av_config_avalon_av_config_slave_agent_rp_data;                                    // AV_Config_avalon_av_config_slave_agent:rp_data -> router_004:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                                   // router_004:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                           // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                             // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                              // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_004_src_data;                                                               // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                              // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                            // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                      // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                        // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          counter_pio_s1_agent_rp_valid;                                                     // counter_pio_s1_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] counter_pio_s1_agent_rp_data;                                                      // counter_pio_s1_agent:rp_data -> router_005:sink_data
	wire          counter_pio_s1_agent_rp_ready;                                                     // router_005:sink_ready -> counter_pio_s1_agent:rp_ready
	wire          counter_pio_s1_agent_rp_startofpacket;                                             // counter_pio_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          counter_pio_s1_agent_rp_endofpacket;                                               // counter_pio_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                              // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_005_src_data;                                                               // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                              // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                            // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                      // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                        // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          num_rows_pio_s1_agent_rp_valid;                                                    // num_rows_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] num_rows_pio_s1_agent_rp_data;                                                     // num_rows_pio_s1_agent:rp_data -> router_006:sink_data
	wire          num_rows_pio_s1_agent_rp_ready;                                                    // router_006:sink_ready -> num_rows_pio_s1_agent:rp_ready
	wire          num_rows_pio_s1_agent_rp_startofpacket;                                            // num_rows_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          num_rows_pio_s1_agent_rp_endofpacket;                                              // num_rows_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                              // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_006_src_data;                                                               // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                              // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                            // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                      // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                        // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          reset_pio_s1_agent_rp_valid;                                                       // reset_pio_s1_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] reset_pio_s1_agent_rp_data;                                                        // reset_pio_s1_agent:rp_data -> router_007:sink_data
	wire          reset_pio_s1_agent_rp_ready;                                                       // router_007:sink_ready -> reset_pio_s1_agent:rp_ready
	wire          reset_pio_s1_agent_rp_startofpacket;                                               // reset_pio_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          reset_pio_s1_agent_rp_endofpacket;                                                 // reset_pio_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                              // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_007_src_data;                                                               // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                              // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                            // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                      // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                        // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          ampl_pio_s1_agent_rp_valid;                                                        // ampl_pio_s1_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] ampl_pio_s1_agent_rp_data;                                                         // ampl_pio_s1_agent:rp_data -> router_008:sink_data
	wire          ampl_pio_s1_agent_rp_ready;                                                        // router_008:sink_ready -> ampl_pio_s1_agent:rp_ready
	wire          ampl_pio_s1_agent_rp_startofpacket;                                                // ampl_pio_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ampl_pio_s1_agent_rp_endofpacket;                                                  // ampl_pio_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                              // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_008_src_data;                                                               // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                              // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                            // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                      // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                        // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          incr_ampl_pio_s1_agent_rp_valid;                                                   // incr_ampl_pio_s1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] incr_ampl_pio_s1_agent_rp_data;                                                    // incr_ampl_pio_s1_agent:rp_data -> router_009:sink_data
	wire          incr_ampl_pio_s1_agent_rp_ready;                                                   // router_009:sink_ready -> incr_ampl_pio_s1_agent:rp_ready
	wire          incr_ampl_pio_s1_agent_rp_startofpacket;                                           // incr_ampl_pio_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          incr_ampl_pio_s1_agent_rp_endofpacket;                                             // incr_ampl_pio_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                              // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_009_src_data;                                                               // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                              // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                            // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                      // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                        // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          rho_pio_s1_agent_rp_valid;                                                         // rho_pio_s1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] rho_pio_s1_agent_rp_data;                                                          // rho_pio_s1_agent:rp_data -> router_010:sink_data
	wire          rho_pio_s1_agent_rp_ready;                                                         // router_010:sink_ready -> rho_pio_s1_agent:rp_ready
	wire          rho_pio_s1_agent_rp_startofpacket;                                                 // rho_pio_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          rho_pio_s1_agent_rp_endofpacket;                                                   // rho_pio_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                              // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_010_src_data;                                                               // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                              // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                            // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                      // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                        // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          num_cols_pio_s1_agent_rp_valid;                                                    // num_cols_pio_s1_agent:rp_valid -> router_011:sink_valid
	wire  [117:0] num_cols_pio_s1_agent_rp_data;                                                     // num_cols_pio_s1_agent:rp_data -> router_011:sink_data
	wire          num_cols_pio_s1_agent_rp_ready;                                                    // router_011:sink_ready -> num_cols_pio_s1_agent:rp_ready
	wire          num_cols_pio_s1_agent_rp_startofpacket;                                            // num_cols_pio_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          num_cols_pio_s1_agent_rp_endofpacket;                                              // num_cols_pio_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                              // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_011_src_data;                                                               // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                              // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                            // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                      // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                        // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          col_ampl_pio_s1_agent_rp_valid;                                                    // col_ampl_pio_s1_agent:rp_valid -> router_012:sink_valid
	wire  [117:0] col_ampl_pio_s1_agent_rp_data;                                                     // col_ampl_pio_s1_agent:rp_data -> router_012:sink_data
	wire          col_ampl_pio_s1_agent_rp_ready;                                                    // router_012:sink_ready -> col_ampl_pio_s1_agent:rp_ready
	wire          col_ampl_pio_s1_agent_rp_startofpacket;                                            // col_ampl_pio_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          col_ampl_pio_s1_agent_rp_endofpacket;                                              // col_ampl_pio_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                              // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [117:0] router_012_src_data;                                                               // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                              // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                            // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                      // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                        // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          done_pio_s1_agent_rp_valid;                                                        // done_pio_s1_agent:rp_valid -> router_013:sink_valid
	wire  [117:0] done_pio_s1_agent_rp_data;                                                         // done_pio_s1_agent:rp_data -> router_013:sink_data
	wire          done_pio_s1_agent_rp_ready;                                                        // router_013:sink_ready -> done_pio_s1_agent:rp_ready
	wire          done_pio_s1_agent_rp_startofpacket;                                                // done_pio_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          done_pio_s1_agent_rp_endofpacket;                                                  // done_pio_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                              // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [117:0] router_013_src_data;                                                               // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                              // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [10:0] router_013_src_channel;                                                            // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                      // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                        // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                                   // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                  // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                                // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                             // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                           // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                     // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                 // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                             // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                           // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                     // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                                               // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                            // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                             // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                           // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                     // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                             // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                                              // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                           // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                     // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                       // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                             // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                           // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                     // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> Audio_Subsystem_audio_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> Audio_Subsystem_audio_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                 // Audio_Subsystem_audio_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> Audio_Subsystem_audio_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_endofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_valid;                           // Audio_Subsystem_audio_slave_burst_adapter:source0_valid -> Audio_Subsystem_audio_slave_agent:cp_valid
	wire  [117:0] audio_subsystem_audio_slave_burst_adapter_source0_data;                            // Audio_Subsystem_audio_slave_burst_adapter:source0_data -> Audio_Subsystem_audio_slave_agent:cp_data
	wire          audio_subsystem_audio_slave_burst_adapter_source0_ready;                           // Audio_Subsystem_audio_slave_agent:cp_ready -> Audio_Subsystem_audio_slave_burst_adapter:source0_ready
	wire   [10:0] audio_subsystem_audio_slave_burst_adapter_source0_channel;                         // Audio_Subsystem_audio_slave_burst_adapter:source0_channel -> Audio_Subsystem_audio_slave_agent:cp_channel
	wire          audio_subsystem_audio_slave_burst_adapter_source0_startofpacket;                   // Audio_Subsystem_audio_slave_burst_adapter:source0_startofpacket -> Audio_Subsystem_audio_slave_agent:cp_startofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_endofpacket;                     // Audio_Subsystem_audio_slave_burst_adapter:source0_endofpacket -> Audio_Subsystem_audio_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                             // cmd_mux_001:src_valid -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                                              // cmd_mux_001:src_data -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                             // AV_Config_avalon_av_config_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                           // cmd_mux_001:src_channel -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                     // cmd_mux_001:src_startofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                       // cmd_mux_001:src_endofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_endofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_valid;                      // AV_Config_avalon_av_config_slave_burst_adapter:source0_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [117:0] av_config_avalon_av_config_slave_burst_adapter_source0_data;                       // AV_Config_avalon_av_config_slave_burst_adapter:source0_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_ready;                      // AV_Config_avalon_av_config_slave_agent:cp_ready -> AV_Config_avalon_av_config_slave_burst_adapter:source0_ready
	wire   [10:0] av_config_avalon_av_config_slave_burst_adapter_source0_channel;                    // AV_Config_avalon_av_config_slave_burst_adapter:source0_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket;              // AV_Config_avalon_av_config_slave_burst_adapter:source0_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket;                // AV_Config_avalon_av_config_slave_burst_adapter:source0_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                             // cmd_mux_002:src_valid -> counter_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                                              // cmd_mux_002:src_data -> counter_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                             // counter_pio_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                           // cmd_mux_002:src_channel -> counter_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                     // cmd_mux_002:src_startofpacket -> counter_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                       // cmd_mux_002:src_endofpacket -> counter_pio_s1_burst_adapter:sink0_endofpacket
	wire          counter_pio_s1_burst_adapter_source0_valid;                                        // counter_pio_s1_burst_adapter:source0_valid -> counter_pio_s1_agent:cp_valid
	wire  [117:0] counter_pio_s1_burst_adapter_source0_data;                                         // counter_pio_s1_burst_adapter:source0_data -> counter_pio_s1_agent:cp_data
	wire          counter_pio_s1_burst_adapter_source0_ready;                                        // counter_pio_s1_agent:cp_ready -> counter_pio_s1_burst_adapter:source0_ready
	wire   [10:0] counter_pio_s1_burst_adapter_source0_channel;                                      // counter_pio_s1_burst_adapter:source0_channel -> counter_pio_s1_agent:cp_channel
	wire          counter_pio_s1_burst_adapter_source0_startofpacket;                                // counter_pio_s1_burst_adapter:source0_startofpacket -> counter_pio_s1_agent:cp_startofpacket
	wire          counter_pio_s1_burst_adapter_source0_endofpacket;                                  // counter_pio_s1_burst_adapter:source0_endofpacket -> counter_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                             // cmd_mux_003:src_valid -> num_rows_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                                              // cmd_mux_003:src_data -> num_rows_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                             // num_rows_pio_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                           // cmd_mux_003:src_channel -> num_rows_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                     // cmd_mux_003:src_startofpacket -> num_rows_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                       // cmd_mux_003:src_endofpacket -> num_rows_pio_s1_burst_adapter:sink0_endofpacket
	wire          num_rows_pio_s1_burst_adapter_source0_valid;                                       // num_rows_pio_s1_burst_adapter:source0_valid -> num_rows_pio_s1_agent:cp_valid
	wire  [117:0] num_rows_pio_s1_burst_adapter_source0_data;                                        // num_rows_pio_s1_burst_adapter:source0_data -> num_rows_pio_s1_agent:cp_data
	wire          num_rows_pio_s1_burst_adapter_source0_ready;                                       // num_rows_pio_s1_agent:cp_ready -> num_rows_pio_s1_burst_adapter:source0_ready
	wire   [10:0] num_rows_pio_s1_burst_adapter_source0_channel;                                     // num_rows_pio_s1_burst_adapter:source0_channel -> num_rows_pio_s1_agent:cp_channel
	wire          num_rows_pio_s1_burst_adapter_source0_startofpacket;                               // num_rows_pio_s1_burst_adapter:source0_startofpacket -> num_rows_pio_s1_agent:cp_startofpacket
	wire          num_rows_pio_s1_burst_adapter_source0_endofpacket;                                 // num_rows_pio_s1_burst_adapter:source0_endofpacket -> num_rows_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                             // cmd_mux_004:src_valid -> reset_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                                              // cmd_mux_004:src_data -> reset_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                             // reset_pio_s1_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                           // cmd_mux_004:src_channel -> reset_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                     // cmd_mux_004:src_startofpacket -> reset_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                       // cmd_mux_004:src_endofpacket -> reset_pio_s1_burst_adapter:sink0_endofpacket
	wire          reset_pio_s1_burst_adapter_source0_valid;                                          // reset_pio_s1_burst_adapter:source0_valid -> reset_pio_s1_agent:cp_valid
	wire  [117:0] reset_pio_s1_burst_adapter_source0_data;                                           // reset_pio_s1_burst_adapter:source0_data -> reset_pio_s1_agent:cp_data
	wire          reset_pio_s1_burst_adapter_source0_ready;                                          // reset_pio_s1_agent:cp_ready -> reset_pio_s1_burst_adapter:source0_ready
	wire   [10:0] reset_pio_s1_burst_adapter_source0_channel;                                        // reset_pio_s1_burst_adapter:source0_channel -> reset_pio_s1_agent:cp_channel
	wire          reset_pio_s1_burst_adapter_source0_startofpacket;                                  // reset_pio_s1_burst_adapter:source0_startofpacket -> reset_pio_s1_agent:cp_startofpacket
	wire          reset_pio_s1_burst_adapter_source0_endofpacket;                                    // reset_pio_s1_burst_adapter:source0_endofpacket -> reset_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                             // cmd_mux_005:src_valid -> ampl_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                                              // cmd_mux_005:src_data -> ampl_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                             // ampl_pio_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                           // cmd_mux_005:src_channel -> ampl_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                     // cmd_mux_005:src_startofpacket -> ampl_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                       // cmd_mux_005:src_endofpacket -> ampl_pio_s1_burst_adapter:sink0_endofpacket
	wire          ampl_pio_s1_burst_adapter_source0_valid;                                           // ampl_pio_s1_burst_adapter:source0_valid -> ampl_pio_s1_agent:cp_valid
	wire  [117:0] ampl_pio_s1_burst_adapter_source0_data;                                            // ampl_pio_s1_burst_adapter:source0_data -> ampl_pio_s1_agent:cp_data
	wire          ampl_pio_s1_burst_adapter_source0_ready;                                           // ampl_pio_s1_agent:cp_ready -> ampl_pio_s1_burst_adapter:source0_ready
	wire   [10:0] ampl_pio_s1_burst_adapter_source0_channel;                                         // ampl_pio_s1_burst_adapter:source0_channel -> ampl_pio_s1_agent:cp_channel
	wire          ampl_pio_s1_burst_adapter_source0_startofpacket;                                   // ampl_pio_s1_burst_adapter:source0_startofpacket -> ampl_pio_s1_agent:cp_startofpacket
	wire          ampl_pio_s1_burst_adapter_source0_endofpacket;                                     // ampl_pio_s1_burst_adapter:source0_endofpacket -> ampl_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                             // cmd_mux_006:src_valid -> incr_ampl_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                                              // cmd_mux_006:src_data -> incr_ampl_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                             // incr_ampl_pio_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                           // cmd_mux_006:src_channel -> incr_ampl_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                     // cmd_mux_006:src_startofpacket -> incr_ampl_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                       // cmd_mux_006:src_endofpacket -> incr_ampl_pio_s1_burst_adapter:sink0_endofpacket
	wire          incr_ampl_pio_s1_burst_adapter_source0_valid;                                      // incr_ampl_pio_s1_burst_adapter:source0_valid -> incr_ampl_pio_s1_agent:cp_valid
	wire  [117:0] incr_ampl_pio_s1_burst_adapter_source0_data;                                       // incr_ampl_pio_s1_burst_adapter:source0_data -> incr_ampl_pio_s1_agent:cp_data
	wire          incr_ampl_pio_s1_burst_adapter_source0_ready;                                      // incr_ampl_pio_s1_agent:cp_ready -> incr_ampl_pio_s1_burst_adapter:source0_ready
	wire   [10:0] incr_ampl_pio_s1_burst_adapter_source0_channel;                                    // incr_ampl_pio_s1_burst_adapter:source0_channel -> incr_ampl_pio_s1_agent:cp_channel
	wire          incr_ampl_pio_s1_burst_adapter_source0_startofpacket;                              // incr_ampl_pio_s1_burst_adapter:source0_startofpacket -> incr_ampl_pio_s1_agent:cp_startofpacket
	wire          incr_ampl_pio_s1_burst_adapter_source0_endofpacket;                                // incr_ampl_pio_s1_burst_adapter:source0_endofpacket -> incr_ampl_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                             // cmd_mux_007:src_valid -> rho_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                                              // cmd_mux_007:src_data -> rho_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                             // rho_pio_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                           // cmd_mux_007:src_channel -> rho_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                     // cmd_mux_007:src_startofpacket -> rho_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                       // cmd_mux_007:src_endofpacket -> rho_pio_s1_burst_adapter:sink0_endofpacket
	wire          rho_pio_s1_burst_adapter_source0_valid;                                            // rho_pio_s1_burst_adapter:source0_valid -> rho_pio_s1_agent:cp_valid
	wire  [117:0] rho_pio_s1_burst_adapter_source0_data;                                             // rho_pio_s1_burst_adapter:source0_data -> rho_pio_s1_agent:cp_data
	wire          rho_pio_s1_burst_adapter_source0_ready;                                            // rho_pio_s1_agent:cp_ready -> rho_pio_s1_burst_adapter:source0_ready
	wire   [10:0] rho_pio_s1_burst_adapter_source0_channel;                                          // rho_pio_s1_burst_adapter:source0_channel -> rho_pio_s1_agent:cp_channel
	wire          rho_pio_s1_burst_adapter_source0_startofpacket;                                    // rho_pio_s1_burst_adapter:source0_startofpacket -> rho_pio_s1_agent:cp_startofpacket
	wire          rho_pio_s1_burst_adapter_source0_endofpacket;                                      // rho_pio_s1_burst_adapter:source0_endofpacket -> rho_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                             // cmd_mux_008:src_valid -> num_cols_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                                              // cmd_mux_008:src_data -> num_cols_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                             // num_cols_pio_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                           // cmd_mux_008:src_channel -> num_cols_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                     // cmd_mux_008:src_startofpacket -> num_cols_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                       // cmd_mux_008:src_endofpacket -> num_cols_pio_s1_burst_adapter:sink0_endofpacket
	wire          num_cols_pio_s1_burst_adapter_source0_valid;                                       // num_cols_pio_s1_burst_adapter:source0_valid -> num_cols_pio_s1_agent:cp_valid
	wire  [117:0] num_cols_pio_s1_burst_adapter_source0_data;                                        // num_cols_pio_s1_burst_adapter:source0_data -> num_cols_pio_s1_agent:cp_data
	wire          num_cols_pio_s1_burst_adapter_source0_ready;                                       // num_cols_pio_s1_agent:cp_ready -> num_cols_pio_s1_burst_adapter:source0_ready
	wire   [10:0] num_cols_pio_s1_burst_adapter_source0_channel;                                     // num_cols_pio_s1_burst_adapter:source0_channel -> num_cols_pio_s1_agent:cp_channel
	wire          num_cols_pio_s1_burst_adapter_source0_startofpacket;                               // num_cols_pio_s1_burst_adapter:source0_startofpacket -> num_cols_pio_s1_agent:cp_startofpacket
	wire          num_cols_pio_s1_burst_adapter_source0_endofpacket;                                 // num_cols_pio_s1_burst_adapter:source0_endofpacket -> num_cols_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                             // cmd_mux_009:src_valid -> col_ampl_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_009_src_data;                                                              // cmd_mux_009:src_data -> col_ampl_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                             // col_ampl_pio_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                           // cmd_mux_009:src_channel -> col_ampl_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                     // cmd_mux_009:src_startofpacket -> col_ampl_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                       // cmd_mux_009:src_endofpacket -> col_ampl_pio_s1_burst_adapter:sink0_endofpacket
	wire          col_ampl_pio_s1_burst_adapter_source0_valid;                                       // col_ampl_pio_s1_burst_adapter:source0_valid -> col_ampl_pio_s1_agent:cp_valid
	wire  [117:0] col_ampl_pio_s1_burst_adapter_source0_data;                                        // col_ampl_pio_s1_burst_adapter:source0_data -> col_ampl_pio_s1_agent:cp_data
	wire          col_ampl_pio_s1_burst_adapter_source0_ready;                                       // col_ampl_pio_s1_agent:cp_ready -> col_ampl_pio_s1_burst_adapter:source0_ready
	wire   [10:0] col_ampl_pio_s1_burst_adapter_source0_channel;                                     // col_ampl_pio_s1_burst_adapter:source0_channel -> col_ampl_pio_s1_agent:cp_channel
	wire          col_ampl_pio_s1_burst_adapter_source0_startofpacket;                               // col_ampl_pio_s1_burst_adapter:source0_startofpacket -> col_ampl_pio_s1_agent:cp_startofpacket
	wire          col_ampl_pio_s1_burst_adapter_source0_endofpacket;                                 // col_ampl_pio_s1_burst_adapter:source0_endofpacket -> col_ampl_pio_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                             // cmd_mux_010:src_valid -> done_pio_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_010_src_data;                                                              // cmd_mux_010:src_data -> done_pio_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                             // done_pio_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                           // cmd_mux_010:src_channel -> done_pio_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                     // cmd_mux_010:src_startofpacket -> done_pio_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                       // cmd_mux_010:src_endofpacket -> done_pio_s1_burst_adapter:sink0_endofpacket
	wire          done_pio_s1_burst_adapter_source0_valid;                                           // done_pio_s1_burst_adapter:source0_valid -> done_pio_s1_agent:cp_valid
	wire  [117:0] done_pio_s1_burst_adapter_source0_data;                                            // done_pio_s1_burst_adapter:source0_data -> done_pio_s1_agent:cp_data
	wire          done_pio_s1_burst_adapter_source0_ready;                                           // done_pio_s1_agent:cp_ready -> done_pio_s1_burst_adapter:source0_ready
	wire   [10:0] done_pio_s1_burst_adapter_source0_channel;                                         // done_pio_s1_burst_adapter:source0_channel -> done_pio_s1_agent:cp_channel
	wire          done_pio_s1_burst_adapter_source0_startofpacket;                                   // done_pio_s1_burst_adapter:source0_startofpacket -> done_pio_s1_agent:cp_startofpacket
	wire          done_pio_s1_burst_adapter_source0_endofpacket;                                     // done_pio_s1_burst_adapter:source0_endofpacket -> done_pio_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                              // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                                               // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                              // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                            // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                      // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                        // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                              // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                                               // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                              // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                            // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                      // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                        // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                              // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                                               // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                              // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                            // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                      // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                        // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                              // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                                               // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                              // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                            // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                      // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                        // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                              // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                                               // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                              // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                            // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                      // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                        // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                              // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                                               // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                              // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                            // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                      // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                        // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                              // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                                               // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                              // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                            // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                      // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                        // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                              // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                                               // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                              // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                            // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                      // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                        // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                              // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [117:0] cmd_demux_src9_data;                                                               // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                              // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [10:0] cmd_demux_src9_channel;                                                            // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                      // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                        // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                             // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [117:0] cmd_demux_src10_data;                                                              // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                             // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [10:0] cmd_demux_src10_channel;                                                           // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                     // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                       // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                          // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                                           // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                          // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                        // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                  // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                    // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                          // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [10:0] cmd_demux_001_src1_channel;                                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                          // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                                           // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                          // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [10:0] cmd_demux_001_src2_channel;                                                        // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                  // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                    // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                          // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                                           // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                          // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [10:0] cmd_demux_001_src3_channel;                                                        // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                  // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                    // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                          // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                                           // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                          // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [10:0] cmd_demux_001_src4_channel;                                                        // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                  // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                    // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                          // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                                           // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                          // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [10:0] cmd_demux_001_src5_channel;                                                        // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                  // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                    // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                          // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                                           // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                          // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [10:0] cmd_demux_001_src6_channel;                                                        // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                  // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                    // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                          // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                                           // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                          // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [10:0] cmd_demux_001_src7_channel;                                                        // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                  // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                    // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                          // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                                           // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                          // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [10:0] cmd_demux_001_src8_channel;                                                        // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                  // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                    // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                          // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [117:0] cmd_demux_001_src9_data;                                                           // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                          // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [10:0] cmd_demux_001_src9_channel;                                                        // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                  // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                    // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                         // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [117:0] cmd_demux_001_src10_data;                                                          // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                         // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [10:0] cmd_demux_001_src10_channel;                                                       // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                 // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                   // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                          // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [117:0] cmd_demux_002_src0_data;                                                           // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                          // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [10:0] cmd_demux_002_src0_channel;                                                        // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                  // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                    // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                              // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                                               // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                              // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [10:0] rsp_demux_src1_channel;                                                            // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                      // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                        // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                              // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [117:0] rsp_demux_src2_data;                                                               // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                              // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [10:0] rsp_demux_src2_channel;                                                            // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                      // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                        // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                          // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                                           // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                          // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                        // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                  // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                    // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                          // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                                           // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [10:0] rsp_demux_001_src1_channel;                                                        // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                  // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                    // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                          // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                                           // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                          // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                        // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                  // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                    // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                          // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                                           // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                          // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [10:0] rsp_demux_002_src1_channel;                                                        // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                  // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                    // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                          // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                                           // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                          // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                        // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                  // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                    // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                          // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                                           // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                          // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [10:0] rsp_demux_003_src1_channel;                                                        // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                  // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                    // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                          // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                                           // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                          // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                        // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                  // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                    // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                          // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                                           // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                          // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [10:0] rsp_demux_004_src1_channel;                                                        // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                  // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                    // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                          // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                                           // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                          // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                        // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                  // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                    // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                          // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                                           // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                          // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [10:0] rsp_demux_005_src1_channel;                                                        // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                  // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                    // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                          // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                                           // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                          // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                        // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                  // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                    // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                          // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                                           // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                          // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [10:0] rsp_demux_006_src1_channel;                                                        // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                  // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                    // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                          // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                                           // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                          // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                        // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                  // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                    // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                          // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                                           // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                          // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [10:0] rsp_demux_007_src1_channel;                                                        // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                                  // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                    // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                          // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                                           // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                          // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                        // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                  // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                    // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                          // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                                           // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                          // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [10:0] rsp_demux_008_src1_channel;                                                        // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                  // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                    // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                          // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [117:0] rsp_demux_009_src0_data;                                                           // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                          // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                        // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                  // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                    // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                          // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [117:0] rsp_demux_009_src1_data;                                                           // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                          // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [10:0] rsp_demux_009_src1_channel;                                                        // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                  // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                    // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                          // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [117:0] rsp_demux_010_src0_data;                                                           // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                          // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                        // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                  // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                    // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                          // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [117:0] rsp_demux_010_src1_data;                                                           // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                          // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [10:0] rsp_demux_010_src1_channel;                                                        // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                  // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                    // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                            // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                            // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_valid;                            // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_out_data;                             // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter:in_0_ready -> Audio_Subsystem_audio_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                     // avalon_st_adapter:out_0_valid -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                      // avalon_st_adapter:out_0_data -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                     // Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                     // avalon_st_adapter:out_0_error -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_error
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid;                       // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_out_data;                        // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_001:in_0_ready -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                 // avalon_st_adapter_001:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                  // avalon_st_adapter_001:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                 // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                 // avalon_st_adapter_001:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          counter_pio_s1_agent_rdata_fifo_out_valid;                                         // counter_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] counter_pio_s1_agent_rdata_fifo_out_data;                                          // counter_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          counter_pio_s1_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_002:in_0_ready -> counter_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                 // avalon_st_adapter_002:out_0_valid -> counter_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                  // avalon_st_adapter_002:out_0_data -> counter_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                 // counter_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                 // avalon_st_adapter_002:out_0_error -> counter_pio_s1_agent:rdata_fifo_sink_error
	wire          num_rows_pio_s1_agent_rdata_fifo_out_valid;                                        // num_rows_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] num_rows_pio_s1_agent_rdata_fifo_out_data;                                         // num_rows_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          num_rows_pio_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_003:in_0_ready -> num_rows_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                 // avalon_st_adapter_003:out_0_valid -> num_rows_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                  // avalon_st_adapter_003:out_0_data -> num_rows_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                 // num_rows_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                 // avalon_st_adapter_003:out_0_error -> num_rows_pio_s1_agent:rdata_fifo_sink_error
	wire          reset_pio_s1_agent_rdata_fifo_out_valid;                                           // reset_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] reset_pio_s1_agent_rdata_fifo_out_data;                                            // reset_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          reset_pio_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_004:in_0_ready -> reset_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                 // avalon_st_adapter_004:out_0_valid -> reset_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                  // avalon_st_adapter_004:out_0_data -> reset_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                 // reset_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                 // avalon_st_adapter_004:out_0_error -> reset_pio_s1_agent:rdata_fifo_sink_error
	wire          ampl_pio_s1_agent_rdata_fifo_out_valid;                                            // ampl_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] ampl_pio_s1_agent_rdata_fifo_out_data;                                             // ampl_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          ampl_pio_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_005:in_0_ready -> ampl_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                 // avalon_st_adapter_005:out_0_valid -> ampl_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                  // avalon_st_adapter_005:out_0_data -> ampl_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                 // ampl_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                 // avalon_st_adapter_005:out_0_error -> ampl_pio_s1_agent:rdata_fifo_sink_error
	wire          incr_ampl_pio_s1_agent_rdata_fifo_out_valid;                                       // incr_ampl_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] incr_ampl_pio_s1_agent_rdata_fifo_out_data;                                        // incr_ampl_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          incr_ampl_pio_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_006:in_0_ready -> incr_ampl_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                 // avalon_st_adapter_006:out_0_valid -> incr_ampl_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                  // avalon_st_adapter_006:out_0_data -> incr_ampl_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                 // incr_ampl_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                 // avalon_st_adapter_006:out_0_error -> incr_ampl_pio_s1_agent:rdata_fifo_sink_error
	wire          rho_pio_s1_agent_rdata_fifo_out_valid;                                             // rho_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] rho_pio_s1_agent_rdata_fifo_out_data;                                              // rho_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          rho_pio_s1_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_007:in_0_ready -> rho_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                 // avalon_st_adapter_007:out_0_valid -> rho_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                  // avalon_st_adapter_007:out_0_data -> rho_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                 // rho_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                 // avalon_st_adapter_007:out_0_error -> rho_pio_s1_agent:rdata_fifo_sink_error
	wire          num_cols_pio_s1_agent_rdata_fifo_out_valid;                                        // num_cols_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] num_cols_pio_s1_agent_rdata_fifo_out_data;                                         // num_cols_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          num_cols_pio_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_008:in_0_ready -> num_cols_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                 // avalon_st_adapter_008:out_0_valid -> num_cols_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                  // avalon_st_adapter_008:out_0_data -> num_cols_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                 // num_cols_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                 // avalon_st_adapter_008:out_0_error -> num_cols_pio_s1_agent:rdata_fifo_sink_error
	wire          col_ampl_pio_s1_agent_rdata_fifo_out_valid;                                        // col_ampl_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] col_ampl_pio_s1_agent_rdata_fifo_out_data;                                         // col_ampl_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          col_ampl_pio_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_009:in_0_ready -> col_ampl_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                 // avalon_st_adapter_009:out_0_valid -> col_ampl_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                  // avalon_st_adapter_009:out_0_data -> col_ampl_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                 // col_ampl_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                 // avalon_st_adapter_009:out_0_error -> col_ampl_pio_s1_agent:rdata_fifo_sink_error
	wire          done_pio_s1_agent_rdata_fifo_out_valid;                                            // done_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] done_pio_s1_agent_rdata_fifo_out_data;                                             // done_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          done_pio_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_010:in_0_ready -> done_pio_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                 // avalon_st_adapter_010:out_0_valid -> done_pio_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                  // avalon_st_adapter_010:out_0_data -> done_pio_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                 // done_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                 // avalon_st_adapter_010:out_0_error -> done_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) bus_master_audio_avalon_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                            //                       clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (bus_master_audio_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (bus_master_audio_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (bus_master_audio_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (bus_master_audio_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (bus_master_audio_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (bus_master_audio_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (bus_master_audio_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (bus_master_audio_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (bus_master_audio_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Bus_master_audio_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Bus_master_audio_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Bus_master_audio_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (Bus_master_audio_avalon_master_read),                                               //                          .read
		.av_readdata            (Bus_master_audio_avalon_master_readdata),                                           //                          .readdata
		.av_write               (Bus_master_audio_avalon_master_write),                                              //                          .write
		.av_writedata           (Bus_master_audio_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_readdatavalid       (),                                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_subsystem_audio_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_subsystem_audio_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_subsystem_audio_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_subsystem_audio_slave_agent_m0_read),          //                         .read
		.uav_write              (audio_subsystem_audio_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_subsystem_audio_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_subsystem_audio_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_subsystem_audio_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_subsystem_audio_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_subsystem_audio_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_subsystem_audio_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_subsystem_audio_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Audio_Subsystem_audio_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Audio_Subsystem_audio_slave_write),                  //                         .write
		.av_read                (Audio_Subsystem_audio_slave_read),                   //                         .read
		.av_readdata            (Audio_Subsystem_audio_slave_readdata),               //                         .readdata
		.av_writedata           (Audio_Subsystem_audio_slave_writedata),              //                         .writedata
		.av_chipselect          (Audio_Subsystem_audio_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) counter_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (counter_pio_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (counter_pio_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (counter_pio_s1_agent_m0_read),                       //                         .read
		.uav_write              (counter_pio_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (counter_pio_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (counter_pio_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (counter_pio_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (counter_pio_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (counter_pio_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (counter_pio_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (counter_pio_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (counter_pio_s1_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (counter_pio_s1_readdata),                            //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_read                (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) num_rows_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (num_rows_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (num_rows_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (num_rows_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (num_rows_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (num_rows_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (num_rows_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (num_rows_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (num_rows_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (num_rows_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (num_rows_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (num_rows_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (num_rows_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (num_rows_pio_s1_write),                              //                         .write
		.av_readdata            (num_rows_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (num_rows_pio_s1_writedata),                          //                         .writedata
		.av_chipselect          (num_rows_pio_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) reset_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (reset_pio_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (reset_pio_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (reset_pio_s1_agent_m0_read),                         //                         .read
		.uav_write              (reset_pio_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (reset_pio_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (reset_pio_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (reset_pio_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (reset_pio_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (reset_pio_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (reset_pio_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (reset_pio_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (reset_pio_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (reset_pio_s1_write),                                 //                         .write
		.av_readdata            (reset_pio_s1_readdata),                              //                         .readdata
		.av_writedata           (reset_pio_s1_writedata),                             //                         .writedata
		.av_chipselect          (reset_pio_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ampl_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ampl_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (ampl_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (ampl_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (ampl_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (ampl_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (ampl_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (ampl_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (ampl_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (ampl_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (ampl_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (ampl_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (ampl_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (ampl_pio_s1_readdata),                               //                         .readdata
		.av_write               (),                                                   //              (terminated)
		.av_read                (),                                                   //              (terminated)
		.av_writedata           (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) incr_ampl_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (incr_ampl_pio_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (incr_ampl_pio_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (incr_ampl_pio_s1_agent_m0_read),                     //                         .read
		.uav_write              (incr_ampl_pio_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (incr_ampl_pio_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (incr_ampl_pio_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (incr_ampl_pio_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (incr_ampl_pio_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (incr_ampl_pio_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (incr_ampl_pio_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (incr_ampl_pio_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (incr_ampl_pio_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (incr_ampl_pio_s1_write),                             //                         .write
		.av_readdata            (incr_ampl_pio_s1_readdata),                          //                         .readdata
		.av_writedata           (incr_ampl_pio_s1_writedata),                         //                         .writedata
		.av_chipselect          (incr_ampl_pio_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rho_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rho_pio_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (rho_pio_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (rho_pio_s1_agent_m0_read),                           //                         .read
		.uav_write              (rho_pio_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (rho_pio_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (rho_pio_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (rho_pio_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (rho_pio_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (rho_pio_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (rho_pio_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (rho_pio_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (rho_pio_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (rho_pio_s1_write),                                   //                         .write
		.av_readdata            (rho_pio_s1_readdata),                                //                         .readdata
		.av_writedata           (rho_pio_s1_writedata),                               //                         .writedata
		.av_chipselect          (rho_pio_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) num_cols_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (num_cols_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (num_cols_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (num_cols_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (num_cols_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (num_cols_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (num_cols_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (num_cols_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (num_cols_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (num_cols_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (num_cols_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (num_cols_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (num_cols_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (num_cols_pio_s1_write),                              //                         .write
		.av_readdata            (num_cols_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (num_cols_pio_s1_writedata),                          //                         .writedata
		.av_chipselect          (num_cols_pio_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) col_ampl_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (col_ampl_pio_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (col_ampl_pio_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (col_ampl_pio_s1_agent_m0_read),                      //                         .read
		.uav_write              (col_ampl_pio_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (col_ampl_pio_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (col_ampl_pio_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (col_ampl_pio_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (col_ampl_pio_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (col_ampl_pio_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (col_ampl_pio_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (col_ampl_pio_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (col_ampl_pio_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (col_ampl_pio_s1_write),                              //                         .write
		.av_readdata            (col_ampl_pio_s1_readdata),                           //                         .readdata
		.av_writedata           (col_ampl_pio_s1_writedata),                          //                         .writedata
		.av_chipselect          (col_ampl_pio_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) done_pio_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (Bus_master_audio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (done_pio_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (done_pio_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (done_pio_s1_agent_m0_read),                          //                         .read
		.uav_write              (done_pio_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (done_pio_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (done_pio_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (done_pio_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (done_pio_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (done_pio_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (done_pio_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (done_pio_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (done_pio_s1_address),                                //      avalon_anti_slave_0.address
		.av_write               (done_pio_s1_write),                                  //                         .write
		.av_readdata            (done_pio_s1_readdata),                               //                         .readdata
		.av_writedata           (done_pio_s1_writedata),                              //                         .writedata
		.av_chipselect          (done_pio_s1_chipselect),                             //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) bus_master_audio_avalon_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (bus_master_audio_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (bus_master_audio_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (bus_master_audio_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (bus_master_audio_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (bus_master_audio_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (bus_master_audio_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (bus_master_audio_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (bus_master_audio_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (bus_master_audio_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (bus_master_audio_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (bus_master_audio_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (bus_master_audio_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (bus_master_audio_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (bus_master_audio_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (bus_master_audio_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                             //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_subsystem_audio_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (audio_subsystem_audio_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (audio_subsystem_audio_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (audio_subsystem_audio_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (audio_subsystem_audio_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (audio_subsystem_audio_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (audio_subsystem_audio_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (audio_subsystem_audio_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (audio_subsystem_audio_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (audio_subsystem_audio_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (audio_subsystem_audio_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (audio_subsystem_audio_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (audio_subsystem_audio_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (audio_subsystem_audio_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (audio_subsystem_audio_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (audio_subsystem_audio_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (audio_subsystem_audio_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (audio_subsystem_audio_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (audio_subsystem_audio_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (audio_subsystem_audio_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (audio_subsystem_audio_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (audio_subsystem_audio_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (audio_subsystem_audio_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (audio_subsystem_audio_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_subsystem_audio_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_subsystem_audio_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (av_config_avalon_av_config_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) counter_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (counter_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (counter_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (counter_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (counter_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (counter_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (counter_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (counter_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (counter_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (counter_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (counter_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (counter_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (counter_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (counter_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (counter_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (counter_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (counter_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (counter_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (counter_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (counter_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (counter_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (counter_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (counter_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (counter_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (counter_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (counter_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (counter_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (counter_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (counter_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (counter_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (counter_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (counter_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (counter_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (counter_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (counter_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (counter_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) counter_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (counter_pio_s1_agent_rf_source_data),                //        in.data
		.in_valid          (counter_pio_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (counter_pio_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (counter_pio_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (counter_pio_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (counter_pio_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (counter_pio_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (counter_pio_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (counter_pio_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (counter_pio_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) counter_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (counter_pio_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (counter_pio_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (counter_pio_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (counter_pio_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (counter_pio_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (counter_pio_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) num_rows_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (num_rows_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (num_rows_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (num_rows_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (num_rows_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (num_rows_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (num_rows_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (num_rows_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (num_rows_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (num_rows_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (num_rows_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (num_rows_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (num_rows_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (num_rows_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (num_rows_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (num_rows_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (num_rows_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (num_rows_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (num_rows_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (num_rows_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (num_rows_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (num_rows_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (num_rows_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (num_rows_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (num_rows_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (num_rows_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (num_rows_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (num_rows_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (num_rows_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (num_rows_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (num_rows_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (num_rows_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (num_rows_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (num_rows_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (num_rows_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (num_rows_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num_rows_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (num_rows_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (num_rows_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (num_rows_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (num_rows_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (num_rows_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (num_rows_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (num_rows_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (num_rows_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (num_rows_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (num_rows_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num_rows_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (num_rows_pio_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (num_rows_pio_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (num_rows_pio_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (num_rows_pio_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (num_rows_pio_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (num_rows_pio_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) reset_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (reset_pio_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (reset_pio_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (reset_pio_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (reset_pio_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (reset_pio_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (reset_pio_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (reset_pio_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (reset_pio_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (reset_pio_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (reset_pio_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (reset_pio_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (reset_pio_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (reset_pio_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (reset_pio_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (reset_pio_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (reset_pio_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (reset_pio_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (reset_pio_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (reset_pio_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (reset_pio_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (reset_pio_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (reset_pio_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (reset_pio_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (reset_pio_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (reset_pio_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (reset_pio_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (reset_pio_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (reset_pio_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (reset_pio_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (reset_pio_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (reset_pio_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (reset_pio_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (reset_pio_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (reset_pio_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (reset_pio_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_pio_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (reset_pio_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (reset_pio_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (reset_pio_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (reset_pio_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (reset_pio_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (reset_pio_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (reset_pio_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (reset_pio_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (reset_pio_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) reset_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (reset_pio_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (reset_pio_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (reset_pio_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (reset_pio_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (reset_pio_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (reset_pio_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ampl_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ampl_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (ampl_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (ampl_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (ampl_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (ampl_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (ampl_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (ampl_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (ampl_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (ampl_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (ampl_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (ampl_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (ampl_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (ampl_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (ampl_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (ampl_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (ampl_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (ampl_pio_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (ampl_pio_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (ampl_pio_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (ampl_pio_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (ampl_pio_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (ampl_pio_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (ampl_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (ampl_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (ampl_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (ampl_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (ampl_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (ampl_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (ampl_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (ampl_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (ampl_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (ampl_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (ampl_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ampl_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (ampl_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ampl_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ampl_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (ampl_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (ampl_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (ampl_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (ampl_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (ampl_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (ampl_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (ampl_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (ampl_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (ampl_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ampl_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ampl_pio_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (ampl_pio_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (ampl_pio_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (ampl_pio_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (ampl_pio_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (ampl_pio_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) incr_ampl_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                               //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (incr_ampl_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (incr_ampl_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (incr_ampl_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (incr_ampl_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (incr_ampl_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (incr_ampl_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (incr_ampl_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (incr_ampl_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (incr_ampl_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (incr_ampl_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (incr_ampl_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (incr_ampl_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (incr_ampl_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (incr_ampl_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (incr_ampl_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (incr_ampl_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (incr_ampl_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (incr_ampl_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (incr_ampl_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (incr_ampl_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (incr_ampl_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (incr_ampl_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (incr_ampl_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (incr_ampl_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (incr_ampl_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (incr_ampl_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (incr_ampl_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (incr_ampl_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (incr_ampl_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (incr_ampl_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (incr_ampl_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (incr_ampl_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (incr_ampl_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (incr_ampl_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (incr_ampl_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) incr_ampl_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (incr_ampl_pio_s1_agent_rf_source_data),              //        in.data
		.in_valid          (incr_ampl_pio_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (incr_ampl_pio_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (incr_ampl_pio_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (incr_ampl_pio_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (incr_ampl_pio_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (incr_ampl_pio_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (incr_ampl_pio_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (incr_ampl_pio_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (incr_ampl_pio_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) incr_ampl_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (incr_ampl_pio_s1_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (incr_ampl_pio_s1_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (incr_ampl_pio_s1_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (incr_ampl_pio_s1_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (incr_ampl_pio_s1_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (incr_ampl_pio_s1_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rho_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rho_pio_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (rho_pio_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (rho_pio_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (rho_pio_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (rho_pio_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (rho_pio_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (rho_pio_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (rho_pio_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (rho_pio_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (rho_pio_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (rho_pio_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (rho_pio_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (rho_pio_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (rho_pio_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (rho_pio_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (rho_pio_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (rho_pio_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (rho_pio_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (rho_pio_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (rho_pio_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (rho_pio_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (rho_pio_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (rho_pio_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (rho_pio_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (rho_pio_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (rho_pio_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (rho_pio_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (rho_pio_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (rho_pio_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (rho_pio_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (rho_pio_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (rho_pio_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (rho_pio_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rho_pio_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (rho_pio_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rho_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rho_pio_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (rho_pio_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (rho_pio_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (rho_pio_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (rho_pio_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (rho_pio_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (rho_pio_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (rho_pio_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (rho_pio_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (rho_pio_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rho_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rho_pio_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (rho_pio_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (rho_pio_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (rho_pio_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (rho_pio_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (rho_pio_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) num_cols_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (num_cols_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (num_cols_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (num_cols_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (num_cols_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (num_cols_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (num_cols_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (num_cols_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (num_cols_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (num_cols_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (num_cols_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (num_cols_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (num_cols_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (num_cols_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (num_cols_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (num_cols_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (num_cols_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (num_cols_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (num_cols_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (num_cols_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (num_cols_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (num_cols_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (num_cols_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (num_cols_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (num_cols_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (num_cols_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (num_cols_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (num_cols_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (num_cols_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (num_cols_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (num_cols_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (num_cols_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (num_cols_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (num_cols_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (num_cols_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (num_cols_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num_cols_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (num_cols_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (num_cols_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (num_cols_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (num_cols_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (num_cols_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (num_cols_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (num_cols_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (num_cols_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (num_cols_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (num_cols_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) num_cols_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (num_cols_pio_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (num_cols_pio_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (num_cols_pio_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (num_cols_pio_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (num_cols_pio_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (num_cols_pio_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) col_ampl_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                              //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (col_ampl_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (col_ampl_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (col_ampl_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (col_ampl_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (col_ampl_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (col_ampl_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (col_ampl_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (col_ampl_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (col_ampl_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (col_ampl_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (col_ampl_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (col_ampl_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (col_ampl_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (col_ampl_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (col_ampl_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (col_ampl_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (col_ampl_pio_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (col_ampl_pio_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (col_ampl_pio_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (col_ampl_pio_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (col_ampl_pio_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (col_ampl_pio_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (col_ampl_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (col_ampl_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (col_ampl_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (col_ampl_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (col_ampl_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (col_ampl_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (col_ampl_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (col_ampl_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (col_ampl_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (col_ampl_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (col_ampl_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (col_ampl_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (col_ampl_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) col_ampl_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (col_ampl_pio_s1_agent_rf_source_data),               //        in.data
		.in_valid          (col_ampl_pio_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (col_ampl_pio_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (col_ampl_pio_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (col_ampl_pio_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (col_ampl_pio_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (col_ampl_pio_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (col_ampl_pio_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (col_ampl_pio_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (col_ampl_pio_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) col_ampl_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (col_ampl_pio_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (col_ampl_pio_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (col_ampl_pio_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (col_ampl_pio_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (col_ampl_pio_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (col_ampl_pio_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) done_pio_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (Bus_master_audio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (done_pio_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (done_pio_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (done_pio_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (done_pio_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (done_pio_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (done_pio_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (done_pio_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (done_pio_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (done_pio_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (done_pio_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (done_pio_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (done_pio_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (done_pio_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (done_pio_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (done_pio_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (done_pio_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (done_pio_s1_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (done_pio_s1_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (done_pio_s1_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (done_pio_s1_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (done_pio_s1_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (done_pio_s1_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (done_pio_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (done_pio_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (done_pio_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (done_pio_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (done_pio_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (done_pio_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (done_pio_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (done_pio_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (done_pio_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (done_pio_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (done_pio_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (done_pio_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (done_pio_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) done_pio_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (done_pio_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (done_pio_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (done_pio_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (done_pio_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (done_pio_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (done_pio_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (done_pio_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (done_pio_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (done_pio_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (done_pio_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) done_pio_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset             (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (done_pio_s1_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (done_pio_s1_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (done_pio_s1_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (done_pio_s1_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (done_pio_s1_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (done_pio_s1_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (bus_master_audio_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (bus_master_audio_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (bus_master_audio_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (bus_master_audio_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (bus_master_audio_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_002_src_ready),                                  //       src.ready
		.src_valid          (router_002_src_valid),                                  //          .valid
		.src_data           (router_002_src_data),                                   //          .data
		.src_channel        (router_002_src_channel),                                //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (audio_subsystem_audio_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_subsystem_audio_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_subsystem_audio_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_subsystem_audio_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_subsystem_audio_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                                    //       src.ready
		.src_valid          (router_004_src_valid),                                    //          .valid
		.src_data           (router_004_src_data),                                     //          .data
		.src_channel        (router_004_src_channel),                                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (counter_pio_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (counter_pio_s1_agent_rp_valid),                      //          .valid
		.sink_data          (counter_pio_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (counter_pio_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (counter_pio_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (num_rows_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (num_rows_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (num_rows_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (num_rows_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (num_rows_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (reset_pio_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (reset_pio_s1_agent_rp_valid),                        //          .valid
		.sink_data          (reset_pio_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (reset_pio_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (reset_pio_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (ampl_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (ampl_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (ampl_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (ampl_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (ampl_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                               //       src.ready
		.src_valid          (router_008_src_valid),                               //          .valid
		.src_data           (router_008_src_data),                                //          .data
		.src_channel        (router_008_src_channel),                             //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (incr_ampl_pio_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (incr_ampl_pio_s1_agent_rp_valid),                    //          .valid
		.sink_data          (incr_ampl_pio_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (incr_ampl_pio_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (incr_ampl_pio_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                               //       src.ready
		.src_valid          (router_009_src_valid),                               //          .valid
		.src_data           (router_009_src_data),                                //          .data
		.src_channel        (router_009_src_channel),                             //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (rho_pio_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (rho_pio_s1_agent_rp_valid),                          //          .valid
		.sink_data          (rho_pio_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (rho_pio_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (rho_pio_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                               //       src.ready
		.src_valid          (router_010_src_valid),                               //          .valid
		.src_data           (router_010_src_data),                                //          .data
		.src_channel        (router_010_src_channel),                             //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (num_cols_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (num_cols_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (num_cols_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (num_cols_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (num_cols_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                               //       src.ready
		.src_valid          (router_011_src_valid),                               //          .valid
		.src_data           (router_011_src_data),                                //          .data
		.src_channel        (router_011_src_channel),                             //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (col_ampl_pio_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (col_ampl_pio_s1_agent_rp_valid),                     //          .valid
		.sink_data          (col_ampl_pio_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (col_ampl_pio_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (col_ampl_pio_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                               //       src.ready
		.src_valid          (router_012_src_valid),                               //          .valid
		.src_data           (router_012_src_data),                                //          .data
		.src_channel        (router_012_src_channel),                             //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (done_pio_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (done_pio_s1_agent_rp_valid),                         //          .valid
		.sink_data          (done_pio_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (done_pio_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (done_pio_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                               //       src.ready
		.src_valid          (router_013_src_valid),                               //          .valid
		.src_data           (router_013_src_data),                                //          .data
		.src_channel        (router_013_src_channel),                             //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) audio_subsystem_audio_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (audio_subsystem_audio_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (audio_subsystem_audio_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) av_config_avalon_av_config_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                //          .ready
		.source0_valid         (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (av_config_avalon_av_config_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) counter_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                               //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                              //          .ready
		.source0_valid         (counter_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (counter_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (counter_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (counter_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (counter_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (counter_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) num_rows_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                               //          .ready
		.source0_valid         (num_rows_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (num_rows_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (num_rows_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (num_rows_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (num_rows_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (num_rows_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) reset_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                               //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                              //          .ready
		.source0_valid         (reset_pio_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (reset_pio_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (reset_pio_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (reset_pio_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (reset_pio_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (reset_pio_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ampl_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                               //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                              //          .ready
		.source0_valid         (ampl_pio_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (ampl_pio_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (ampl_pio_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (ampl_pio_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (ampl_pio_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (ampl_pio_s1_burst_adapter_source0_ready)             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) incr_ampl_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                               //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                //          .ready
		.source0_valid         (incr_ampl_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (incr_ampl_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (incr_ampl_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (incr_ampl_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (incr_ampl_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (incr_ampl_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) rho_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                               //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                              //          .ready
		.source0_valid         (rho_pio_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (rho_pio_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (rho_pio_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (rho_pio_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (rho_pio_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (rho_pio_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) num_cols_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                               //          .ready
		.source0_valid         (num_cols_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (num_cols_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (num_cols_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (num_cols_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (num_cols_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (num_cols_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) col_ampl_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                              //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                               //          .ready
		.source0_valid         (col_ampl_pio_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (col_ampl_pio_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (col_ampl_pio_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (col_ampl_pio_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (col_ampl_pio_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (col_ampl_pio_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) done_pio_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (Bus_master_audio_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                               //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                              //          .ready
		.source0_valid         (done_pio_s1_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (done_pio_s1_burst_adapter_source0_data),             //          .data
		.source0_channel       (done_pio_s1_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (done_pio_s1_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (done_pio_s1_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (done_pio_s1_burst_adapter_source0_ready)             //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data           (cmd_demux_src0_data),                                                      //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data           (cmd_demux_src1_data),                                                      //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data           (cmd_demux_src2_data),                                                      //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data           (cmd_demux_src3_data),                                                      //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data           (cmd_demux_src4_data),                                                      //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data           (cmd_demux_src5_data),                                                      //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data           (cmd_demux_src6_data),                                                      //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data           (cmd_demux_src7_data),                                                      //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                               //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                     //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                     //           .valid
		.src8_data           (cmd_demux_src8_data),                                                      //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                   //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                             //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                               //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                     //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                     //           .valid
		.src9_data           (cmd_demux_src9_data),                                                      //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                   //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                             //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                               //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                    //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                    //           .valid
		.src10_data          (cmd_demux_src10_data),                                                     //           .data
		.src10_channel       (cmd_demux_src10_channel),                                                  //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                            //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket)                                               //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                           //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                                 //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                                 //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                                  //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                               //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                           //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                                 //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                                 //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                                  //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                               //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                           //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                                //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                                //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                                 //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                              //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket)                                           //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                               //      sink.ready
		.sink_channel       (router_002_src_channel),                             //          .channel
		.sink_data          (router_002_src_data),                                //          .data
		.sink_startofpacket (router_002_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_002_src_valid),                               //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                           //          .valid
		.src0_data          (cmd_demux_002_src0_data),                            //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                  //          .valid
		.src_data            (cmd_mux_src_data),                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                     //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                           //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                           //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                         //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                            //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                              //          .valid
		.src_data            (cmd_mux_001_src_data),                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                             //          .channel
		.sink0_data          (cmd_demux_src1_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                              //          .valid
		.src_data            (cmd_mux_002_src_data),                               //          .data
		.src_channel         (cmd_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                             //          .channel
		.sink0_data          (cmd_demux_src2_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                             //          .channel
		.sink0_data          (cmd_demux_src3_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                              //          .valid
		.src_data            (cmd_mux_004_src_data),                               //          .data
		.src_channel         (cmd_mux_004_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                             //          .channel
		.sink0_data          (cmd_demux_src4_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                              //          .valid
		.src_data            (cmd_mux_005_src_data),                               //          .data
		.src_channel         (cmd_mux_005_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                             //          .channel
		.sink0_data          (cmd_demux_src5_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                              //          .valid
		.src_data            (cmd_mux_006_src_data),                               //          .data
		.src_channel         (cmd_mux_006_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                             //          .channel
		.sink0_data          (cmd_demux_src6_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                              //          .valid
		.src_data            (cmd_mux_007_src_data),                               //          .data
		.src_channel         (cmd_mux_007_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                             //          .channel
		.sink0_data          (cmd_demux_src7_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                              //          .valid
		.src_data            (cmd_mux_008_src_data),                               //          .data
		.src_channel         (cmd_mux_008_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                             //          .channel
		.sink0_data          (cmd_demux_src8_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                              //          .valid
		.src_data            (cmd_mux_009_src_data),                               //          .data
		.src_channel         (cmd_mux_009_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                             //          .channel
		.sink0_data          (cmd_demux_src9_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                         //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                           //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                         //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                            //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                              //          .valid
		.src_data            (cmd_mux_010_src_data),                               //          .data
		.src_channel         (cmd_mux_010_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                            //          .channel
		.sink0_data          (cmd_demux_src10_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                               //      sink.ready
		.sink_channel       (router_003_src_channel),                             //          .channel
		.sink_data          (router_003_src_data),                                //          .data
		.sink_startofpacket (router_003_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_003_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                         //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                               //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                               //          .valid
		.src1_data          (rsp_demux_src1_data),                                //          .data
		.src1_channel       (rsp_demux_src1_channel),                             //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                       //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                         //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                               //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                               //          .valid
		.src2_data          (rsp_demux_src2_data),                                //          .data
		.src2_channel       (rsp_demux_src2_channel),                             //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                       //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                               //      sink.ready
		.sink_channel       (router_004_src_channel),                             //          .channel
		.sink_data          (router_004_src_data),                                //          .data
		.sink_startofpacket (router_004_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_004_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_001_src1_data),                            //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                               //      sink.ready
		.sink_channel       (router_005_src_channel),                             //          .channel
		.sink_data          (router_005_src_data),                                //          .data
		.sink_startofpacket (router_005_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_005_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_002_src0_data),                            //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_002_src1_data),                            //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                               //      sink.ready
		.sink_channel       (router_006_src_channel),                             //          .channel
		.sink_data          (router_006_src_data),                                //          .data
		.sink_startofpacket (router_006_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_006_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_003_src1_data),                            //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                               //      sink.ready
		.sink_channel       (router_007_src_channel),                             //          .channel
		.sink_data          (router_007_src_data),                                //          .data
		.sink_startofpacket (router_007_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_007_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_004_src0_data),                            //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_004_src1_data),                            //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                               //      sink.ready
		.sink_channel       (router_008_src_channel),                             //          .channel
		.sink_data          (router_008_src_data),                                //          .data
		.sink_startofpacket (router_008_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_008_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_005_src0_data),                            //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_005_src1_data),                            //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                               //      sink.ready
		.sink_channel       (router_009_src_channel),                             //          .channel
		.sink_data          (router_009_src_data),                                //          .data
		.sink_startofpacket (router_009_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_009_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_006_src0_data),                            //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_006_src1_data),                            //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                               //      sink.ready
		.sink_channel       (router_010_src_channel),                             //          .channel
		.sink_data          (router_010_src_data),                                //          .data
		.sink_startofpacket (router_010_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_010_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_007_src0_data),                            //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_007_src1_data),                            //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                               //      sink.ready
		.sink_channel       (router_011_src_channel),                             //          .channel
		.sink_data          (router_011_src_data),                                //          .data
		.sink_startofpacket (router_011_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_011_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_008_src0_data),                            //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_008_src1_data),                            //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                               //      sink.ready
		.sink_channel       (router_012_src_channel),                             //          .channel
		.sink_data          (router_012_src_data),                                //          .data
		.sink_startofpacket (router_012_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_012_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_009_src0_data),                            //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_009_src1_data),                            //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                               //      sink.ready
		.sink_channel       (router_013_src_channel),                             //          .channel
		.sink_data          (router_013_src_data),                                //          .data
		.sink_startofpacket (router_013_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_013_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_010_src0_data),                            //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_010_src1_data),                            //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data             (rsp_mux_001_src_data),                                                     //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset               (Bus_master_audio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                              //          .valid
		.src_data            (rsp_mux_002_src_data),                               //          .data
		.src_channel         (rsp_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                               //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                               //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                             //          .channel
		.sink0_data          (rsp_demux_src2_data),                                //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (counter_pio_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (counter_pio_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (counter_pio_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (num_rows_pio_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (num_rows_pio_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (num_rows_pio_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (reset_pio_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (reset_pio_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (reset_pio_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ampl_pio_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (ampl_pio_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (ampl_pio_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (incr_ampl_pio_s1_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (incr_ampl_pio_s1_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (incr_ampl_pio_s1_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rho_pio_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (rho_pio_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (rho_pio_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (num_cols_pio_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (num_cols_pio_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (num_cols_pio_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (col_ampl_pio_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (col_ampl_pio_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (col_ampl_pio_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (Bus_master_audio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (done_pio_s1_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (done_pio_s1_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (done_pio_s1_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                   //         .error
	);

endmodule
